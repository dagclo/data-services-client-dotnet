/* 
 * Address Correction
 *
 * The Address Correction data service validates and corrects postal addresses from around the world.  The service is currently available for the following countries: United States, United Kingdom, and Canada. Address correction standardizes address spellings, abbreviations, and formats, adds additional delivery information, such as geocodes, and verifies the deliverability of each address.  It improves your delivery success odds by correcting incorrect information, such as postal codes and typos in street names, and verifying delivery target names.  Key functionality: * Corrects the spelling of street names and cities. * Standardizes address formats and abbreviations, based on country ID. * Enriches output with deliverability information for an address, such as USPS DPVÂ® confirmation and geocoding coordinates. * Provides easy-to-understand correction status, codes, and messages.
 *
 * OpenAPI spec version: 1.0.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Quadient.DataServices.Model.Address
{
    /// <summary>
    /// The address that results and is output after correction. This object contains the information needed to represent the address in a variety of ways, but the printed address always contains  the following fields, separated on individual lines: * organization * address_lines * regional_lines * country
    /// </summary>
    [DataContract]
    public partial class CorrectionResponseAddress : BaseAddress,  IEquatable<CorrectionResponseAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorrectionResponseAddress" /> class.
        /// </summary>
        [JsonConstructor]
        protected CorrectionResponseAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorrectionResponseAddress" /> class.
        /// </summary>
        /// <param name="RegionalLines">A set of lines that presents the regional lines of an address block. Depending on the country, this typically consists of postal code, and city and state or province..</param>
        public CorrectionResponseAddress(List<string> RegionalLines = default(List<string>), string Organization = default(string), List<string> AddressLines = default(List<string>), string City = default(string), string County = default(string), string ProvinceOrState = default(string), string PostalCode = default(string), string Country = default(string)) : base(Organization, AddressLines, City, County, ProvinceOrState, PostalCode, Country)
        {
            this.RegionalLines = RegionalLines;
        }
        
        /// <summary>
        /// A set of lines that presents the regional lines of an address block. Depending on the country, this typically consists of postal code, and city and state or province.
        /// </summary>
        /// <value>A set of lines that presents the regional lines of an address block. Depending on the country, this typically consists of postal code, and city and state or province.</value>
        [DataMember(Name="regional_lines", EmitDefaultValue=false)]
        public List<string> RegionalLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorrectionResponseAddress {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RegionalLines: ").Append(RegionalLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CorrectionResponseAddress);
        }

        /// <summary>
        /// Returns true if CorrectionResponseAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of CorrectionResponseAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorrectionResponseAddress input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.RegionalLines == input.RegionalLines ||
                    this.RegionalLines != null &&
                    this.RegionalLines.SequenceEqual(input.RegionalLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.RegionalLines != null)
                    hashCode = hashCode * 59 + this.RegionalLines.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
