/* 
 * Data Quality Assessment
 *
 * Allows users to assess the Quadient Data Services before buying. This service runs assessment jobs based on real data, but does not give back the records that have been corrected. Rather, it provides \"assessment metrics\" which can be used to determine and explain the value of using Data Services. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Assessment
{
	/// <summary>
	/// AppendsMetrics
	/// </summary>
	[DataContract]
	public partial class AppendsMetrics : IEquatable<AppendsMetrics>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="AppendsMetrics" /> class.
		/// </summary>
		/// <param name="Count">Number of records processed with the Move Update and Suppression service.</param>
		/// <param name="MoveUpdate">MoveUpdate.</param>
		/// <param name="Suppression">Suppression.</param>
		public AppendsMetrics(int? Count = default(int?), AppendsMetricsMoveupdate MoveUpdate = default(AppendsMetricsMoveupdate), AppendsMetricsSuppression Suppression = default(AppendsMetricsSuppression))
		{
			this.Count = Count;
			this.MoveUpdate = MoveUpdate;
			this.Suppression = Suppression;
		}
		
		/// <summary>
		/// Number of records processed with the Move Update and Suppression service
		/// </summary>
		/// <value>Number of records processed with the Move Update and Suppression service</value>
		[DataMember(Name="count", EmitDefaultValue=false)]
		public int? Count { get; set; }

		/// <summary>
		/// Gets or Sets MoveUpdate
		/// </summary>
		[DataMember(Name="move-update", EmitDefaultValue=false)]
		public AppendsMetricsMoveupdate MoveUpdate { get; set; }

		/// <summary>
		/// Gets or Sets Suppression
		/// </summary>
		[DataMember(Name="suppression", EmitDefaultValue=false)]
		public AppendsMetricsSuppression Suppression { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class AppendsMetrics {\n");
			sb.Append("  Count: ").Append(Count).Append("\n");
			sb.Append("  MoveUpdate: ").Append(MoveUpdate).Append("\n");
			sb.Append("  Suppression: ").Append(Suppression).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as AppendsMetrics);
		}

		/// <summary>
		/// Returns true if AppendsMetrics instances are equal
		/// </summary>
		/// <param name="input">Instance of AppendsMetrics to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(AppendsMetrics input)
		{
			if (input == null)
				return false;

			return 
				(
					this.Count == input.Count ||
					(this.Count != null &&
					this.Count.Equals(input.Count))
				) && 
				(
					this.MoveUpdate == input.MoveUpdate ||
					(this.MoveUpdate != null &&
					this.MoveUpdate.Equals(input.MoveUpdate))
				) && 
				(
					this.Suppression == input.Suppression ||
					(this.Suppression != null &&
					this.Suppression.Equals(input.Suppression))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.Count != null)
					hashCode = hashCode * 59 + this.Count.GetHashCode();
				if (this.MoveUpdate != null)
					hashCode = hashCode * 59 + this.MoveUpdate.GetHashCode();
				if (this.Suppression != null)
					hashCode = hashCode * 59 + this.Suppression.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
