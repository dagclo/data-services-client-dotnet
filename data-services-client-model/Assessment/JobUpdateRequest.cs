/* 
 * Data Quality Assessment
 *
 * Allows users to assess the Quadient Data Services before buying. This service runs assessment jobs based on real data, but does not give back the records that have been corrected. Rather, it provides \"assessment metrics\" which can be used to determine and explain the value of using Data Services. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Assessment
{
    /// <summary>
    /// JobUpdateRequest
    /// </summary>
    [DataContract]
    public partial class JobUpdateRequest : IEquatable<JobUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobUpdateRequest" /> class.
        /// </summary>
        /// <param name="Name">An optional user-provided name for the job (will overwrite any existing name if specified)..</param>
        /// <param name="Description">An optional user-provided text describing the job (will overwrite any existing description if specified)..</param>
        /// <param name="Complete">If set to true the assessment will begin and no further uploads will be accepted..</param>
        /// <param name="Records">A two-dimensional array containing records to be uploaded.</param>
        public JobUpdateRequest(string Name = default(string), string Description = default(string), bool? Complete = default(bool?), List<List<string>> Records = default(List<List<string>>))
        {
            this.Name = Name;
            this.Description = Description;
            this.Complete = Complete;
            this.Records = Records;
        }
        
        /// <summary>
        /// An optional user-provided name for the job (will overwrite any existing name if specified).
        /// </summary>
        /// <value>An optional user-provided name for the job (will overwrite any existing name if specified).</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// An optional user-provided text describing the job (will overwrite any existing description if specified).
        /// </summary>
        /// <value>An optional user-provided text describing the job (will overwrite any existing description if specified).</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// If set to true the assessment will begin and no further uploads will be accepted.
        /// </summary>
        /// <value>If set to true the assessment will begin and no further uploads will be accepted.</value>
        [DataMember(Name="complete", EmitDefaultValue=false)]
        public bool? Complete { get; set; }

        /// <summary>
        /// A two-dimensional array containing records to be uploaded
        /// </summary>
        /// <value>A two-dimensional array containing records to be uploaded</value>
        [DataMember(Name="records", EmitDefaultValue=false)]
        public List<List<string>> Records { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobUpdateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobUpdateRequest);
        }

        /// <summary>
        /// Returns true if JobUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of JobUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Complete == input.Complete ||
                    (this.Complete != null &&
                    this.Complete.Equals(input.Complete))
                ) && 
                (
                    this.Records == input.Records ||
                    this.Records != null &&
                    this.Records.SequenceEqual(input.Records)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Complete != null)
                    hashCode = hashCode * 59 + this.Complete.GetHashCode();
                if (this.Records != null)
                    hashCode = hashCode * 59 + this.Records.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
