/* 
 * Country Standardization
 *
 * Country Standardization
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Country
{
	/// <summary>
	/// OutputCountry
	/// </summary>
	[DataContract]
	public partial class OutputCountry : IEquatable<OutputCountry>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="OutputCountry" /> class.
		/// </summary>
		/// <param name="Country">Country.</param>
		/// <param name="Outcome">Outcome.</param>
		public OutputCountry(StandardCountry Country = default(StandardCountry), CountryOutcome Outcome = default(CountryOutcome))
		{
			this.Country = Country;
			this.Outcome = Outcome;
		}
		
		/// <summary>
		/// Gets or Sets Country
		/// </summary>
		[DataMember(Name="country", EmitDefaultValue=false)]
		public StandardCountry Country { get; set; }

		/// <summary>
		/// Gets or Sets Outcome
		/// </summary>
		[DataMember(Name="outcome", EmitDefaultValue=false)]
		public CountryOutcome Outcome { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class OutputCountry {\n");
			sb.Append("  Country: ").Append(Country).Append("\n");
			sb.Append("  Outcome: ").Append(Outcome).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as OutputCountry);
		}

		/// <summary>
		/// Returns true if OutputCountry instances are equal
		/// </summary>
		/// <param name="input">Instance of OutputCountry to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(OutputCountry input)
		{
			if (input == null)
				return false;

			return 
				(
					this.Country == input.Country ||
					(this.Country != null &&
					this.Country.Equals(input.Country))
				) && 
				(
					this.Outcome == input.Outcome ||
					(this.Outcome != null &&
					this.Outcome.Equals(input.Outcome))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.Country != null)
					hashCode = hashCode * 59 + this.Country.GetHashCode();
				if (this.Outcome != null)
					hashCode = hashCode * 59 + this.Outcome.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
