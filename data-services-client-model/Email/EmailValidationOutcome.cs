/* 
 * Email Validation
 *
 * The Email Validation data service tests whether the data in a record's email address field is a valid email address.  The service determines whether the provided email address is correctly formatted and conforms to email syntax standards, has a domain that is real and accepts email,  and is linked to a proper mail box or addressee.   Key functionality:  * Provides two methods for validation, Fast or Full, to match the processing needs for your business. * Validates that an email address is valid and correctly formatted. * Has built-in white and black lists of addresses and domains to identify addresses that take advantage of typosquatting or disposable email accounts. * Provides flags to indicate whether it is likely that mail to an email address is deliverable. 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Quadient.DataServices.Model.Email
{
    /// <summary>
    /// EmailValidationOutcome
    /// </summary>
    [DataContract]
    public partial class EmailValidationOutcome : Dictionary<String, string>,  IEquatable<EmailValidationOutcome>, IValidatableObject
    {
        /// <summary>
        /// The final status of the object.
        /// </summary>
        /// <value>The final status of the object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum Valid for value: Valid
            /// </summary>
            [EnumMember(Value = "Valid")]
            Valid = 1,
            
            /// <summary>
            /// Enum Corrected for value: Corrected
            /// </summary>
            [EnumMember(Value = "Corrected")]
            Corrected = 2,
            
            /// <summary>
            /// Enum Invalid for value: Invalid
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid = 3,
            
            /// <summary>
            /// Enum Skipped for value: Skipped
            /// </summary>
            [EnumMember(Value = "Skipped")]
            Skipped = 4,
            
            /// <summary>
            /// Enum Doubtful for value: Doubtful
            /// </summary>
            [EnumMember(Value = "Doubtful")]
            Doubtful = 5
        }

        /// <summary>
        /// The final status of the object.
        /// </summary>
        /// <value>The final status of the object.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidationOutcome" /> class.
        /// </summary>
        [JsonConstructor]
        protected EmailValidationOutcome() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidationOutcome" /> class.
        /// </summary>
        /// <param name="Category">The final status of the object. (required).</param>
        /// <param name="Codes">An object that contains correction codes as keys. The values may be either a string message or another object that contains additional information. (required).</param>
        public EmailValidationOutcome(CategoryEnum Category = default(CategoryEnum), Dictionary<string, string> Codes = default(Dictionary<string, string>)) : base()
        {
            // to ensure "Category" is required (not null)
            if (Category == null)
            {
                throw new InvalidDataException("Category is a required property for EmailValidationOutcome and cannot be null");
            }
            else
            {
                this.Category = Category;
            }
            // to ensure "Codes" is required (not null)
            if (Codes == null)
            {
                throw new InvalidDataException("Codes is a required property for EmailValidationOutcome and cannot be null");
            }
            else
            {
                this.Codes = Codes;
            }
        }
        

        /// <summary>
        /// An object that contains correction codes as keys. The values may be either a string message or another object that contains additional information.
        /// </summary>
        /// <value>An object that contains correction codes as keys. The values may be either a string message or another object that contains additional information.</value>
        [DataMember(Name="codes", EmitDefaultValue=false)]
        public Dictionary<string, string> Codes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailValidationOutcome {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailValidationOutcome);
        }

        /// <summary>
        /// Returns true if EmailValidationOutcome instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailValidationOutcome to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailValidationOutcome input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && base.Equals(input) && 
                (
                    this.Codes == input.Codes ||
                    this.Codes != null &&
                    this.Codes.SequenceEqual(input.Codes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Codes != null)
                    hashCode = hashCode * 59 + this.Codes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
