/* 
 * Email Validation
 *
 * The Email Validation data service tests whether the data in a record's email address field is a valid email address.  The service determines whether the provided email address is correctly formatted and conforms to email syntax standards, has a domain that is real and accepts email,  and is linked to a proper mail box or addressee.   Key functionality:  * Provides two methods for validation, Fast or Full, to match the processing needs for your business. * Validates that an email address is valid and correctly formatted. * Has built-in white and black lists of addresses and domains to identify addresses that take advantage of typosquatting or disposable email accounts. * Provides flags to indicate whether it is likely that mail to an email address is deliverable. 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Quadient.DataServices.Model.Email
{
    /// <summary>
    /// Configuration of the correction request.
    /// </summary>
    [DataContract]
    public partial class EmailValidationRequestConfiguration :  IEquatable<EmailValidationRequestConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Defines which validation method to use. \&quot;Full\&quot; (default) validates an email address  against multiple registries of email addresses, good and bad,  that are confirmed to be in use. \&quot;Fast\&quot; validates an email address only against Quadient-based information.
        /// </summary>
        /// <value>Defines which validation method to use. \&quot;Full\&quot; (default) validates an email address  against multiple registries of email addresses, good and bad,  that are confirmed to be in use. \&quot;Fast\&quot; validates an email address only against Quadient-based information.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStyleEnum
        {
            
            /// <summary>
            /// Enum Full for value: Full
            /// </summary>
            [EnumMember(Value = "Full")]
            Full = 1,
            
            /// <summary>
            /// Enum Fast for value: Fast
            /// </summary>
            [EnumMember(Value = "Fast")]
            Fast = 2
        }

        /// <summary>
        /// Defines which validation method to use. \&quot;Full\&quot; (default) validates an email address  against multiple registries of email addresses, good and bad,  that are confirmed to be in use. \&quot;Fast\&quot; validates an email address only against Quadient-based information.
        /// </summary>
        /// <value>Defines which validation method to use. \&quot;Full\&quot; (default) validates an email address  against multiple registries of email addresses, good and bad,  that are confirmed to be in use. \&quot;Fast\&quot; validates an email address only against Quadient-based information.</value>
        [DataMember(Name="processing_style", EmitDefaultValue=false)]
        public ProcessingStyleEnum? ProcessingStyle { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidationRequestConfiguration" /> class.
        /// </summary>
        /// <param name="DisableOrdering">Default behavior outputs records in the same order they were entered. Disable that behavior for a potential increase in speed..</param>
        /// <param name="ProcessingStyle">Defines which validation method to use. \&quot;Full\&quot; (default) validates an email address  against multiple registries of email addresses, good and bad,  that are confirmed to be in use. \&quot;Fast\&quot; validates an email address only against Quadient-based information..</param>
        public EmailValidationRequestConfiguration(bool? DisableOrdering = default(bool?), ProcessingStyleEnum? ProcessingStyle = default(ProcessingStyleEnum?))
        {
            this.DisableOrdering = DisableOrdering;
            this.ProcessingStyle = ProcessingStyle;
        }
        
        /// <summary>
        /// Default behavior outputs records in the same order they were entered. Disable that behavior for a potential increase in speed.
        /// </summary>
        /// <value>Default behavior outputs records in the same order they were entered. Disable that behavior for a potential increase in speed.</value>
        [DataMember(Name="disable_ordering", EmitDefaultValue=false)]
        public bool? DisableOrdering { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailValidationRequestConfiguration {\n");
            sb.Append("  DisableOrdering: ").Append(DisableOrdering).Append("\n");
            sb.Append("  ProcessingStyle: ").Append(ProcessingStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailValidationRequestConfiguration);
        }

        /// <summary>
        /// Returns true if EmailValidationRequestConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailValidationRequestConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailValidationRequestConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisableOrdering == input.DisableOrdering ||
                    (this.DisableOrdering != null &&
                    this.DisableOrdering.Equals(input.DisableOrdering))
                ) && 
                (
                    this.ProcessingStyle == input.ProcessingStyle ||
                    (this.ProcessingStyle != null &&
                    this.ProcessingStyle.Equals(input.ProcessingStyle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisableOrdering != null)
                    hashCode = hashCode * 59 + this.DisableOrdering.GetHashCode();
                if (this.ProcessingStyle != null)
                    hashCode = hashCode * 59 + this.ProcessingStyle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
