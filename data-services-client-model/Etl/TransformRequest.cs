/* 
 * ETL service
 *
 * The Extract, Transform Load (ETL) service handles data representation changes before or after applying Quadient Data Services that process the data.  The service aids in dealing with files and tables and transformations between the two. Usually, a data service is able to consume table data with certain schema requirements. The ETL service enables a user to upload a file and have it transformed into a shape that is consumeable by the service. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Etl
{
	/// <summary>
	/// TransformRequest
	/// </summary>
	[DataContract]
	public partial class TransformRequest : IEquatable<TransformRequest>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="TransformRequest" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected TransformRequest() { }
		/// <summary>
		/// Initializes a new instance of the <see cref="TransformRequest" /> class.
		/// </summary>
		/// <param name="Limit">Optional. A limit to the number of records to transform or copy to the new table..</param>
		/// <param name="DeleteAfterTransform">Optional. A boolean that can be set to &#x60;true&#x60; to delete the file after a successful transformation. (default to false).</param>
		/// <param name="SrcTableIndex">The table index to transform. (required).</param>
		/// <param name="DestTableSchema">DestTableSchema (required).</param>
		public TransformRequest(int? Limit = default(int?), bool? DeleteAfterTransform = false, int? SrcTableIndex = default(int?), List<TransformColumnMapping> DestTableSchema = default(List<TransformColumnMapping>))
		{
			// to ensure "SrcTableIndex" is required (not null)
			if (SrcTableIndex == null)
			{
				throw new InvalidDataException("SrcTableIndex is a required property for TransformRequest and cannot be null");
			}
			else
			{
				this.SrcTableIndex = SrcTableIndex;
			}
			// to ensure "DestTableSchema" is required (not null)
			if (DestTableSchema == null)
			{
				throw new InvalidDataException("DestTableSchema is a required property for TransformRequest and cannot be null");
			}
			else
			{
				this.DestTableSchema = DestTableSchema;
			}
			this.Limit = Limit;
			// use default value if no "DeleteAfterTransform" provided
			if (DeleteAfterTransform == null)
			{
				this.DeleteAfterTransform = false;
			}
			else
			{
				this.DeleteAfterTransform = DeleteAfterTransform;
			}
		}
		
		/// <summary>
		/// Optional. A limit to the number of records to transform or copy to the new table.
		/// </summary>
		/// <value>Optional. A limit to the number of records to transform or copy to the new table.</value>
		[DataMember(Name="limit", EmitDefaultValue=false)]
		public int? Limit { get; set; }

		/// <summary>
		/// Optional. A boolean that can be set to &#x60;true&#x60; to delete the file after a successful transformation.
		/// </summary>
		/// <value>Optional. A boolean that can be set to &#x60;true&#x60; to delete the file after a successful transformation.</value>
		[DataMember(Name="delete_after_transform", EmitDefaultValue=false)]
		public bool? DeleteAfterTransform { get; set; }

		/// <summary>
		/// The table index to transform.
		/// </summary>
		/// <value>The table index to transform.</value>
		[DataMember(Name="src_table_index", EmitDefaultValue=false)]
		public int? SrcTableIndex { get; set; }

		/// <summary>
		/// Gets or Sets DestTableSchema
		/// </summary>
		[DataMember(Name="dest_table_schema", EmitDefaultValue=false)]
		public List<TransformColumnMapping> DestTableSchema { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class TransformRequest {\n");
			sb.Append("  Limit: ").Append(Limit).Append("\n");
			sb.Append("  DeleteAfterTransform: ").Append(DeleteAfterTransform).Append("\n");
			sb.Append("  SrcTableIndex: ").Append(SrcTableIndex).Append("\n");
			sb.Append("  DestTableSchema: ").Append(DestTableSchema).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as TransformRequest);
		}

		/// <summary>
		/// Returns true if TransformRequest instances are equal
		/// </summary>
		/// <param name="input">Instance of TransformRequest to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(TransformRequest input)
		{
			if (input == null)
				return false;

			return 
				(
					this.Limit == input.Limit ||
					(this.Limit != null &&
					this.Limit.Equals(input.Limit))
				) && 
				(
					this.DeleteAfterTransform == input.DeleteAfterTransform ||
					(this.DeleteAfterTransform != null &&
					this.DeleteAfterTransform.Equals(input.DeleteAfterTransform))
				) && 
				(
					this.SrcTableIndex == input.SrcTableIndex ||
					(this.SrcTableIndex != null &&
					this.SrcTableIndex.Equals(input.SrcTableIndex))
				) && 
				(
					this.DestTableSchema == input.DestTableSchema ||
					this.DestTableSchema != null &&
					this.DestTableSchema.SequenceEqual(input.DestTableSchema)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.Limit != null)
					hashCode = hashCode * 59 + this.Limit.GetHashCode();
				if (this.DeleteAfterTransform != null)
					hashCode = hashCode * 59 + this.DeleteAfterTransform.GetHashCode();
				if (this.SrcTableIndex != null)
					hashCode = hashCode * 59 + this.SrcTableIndex.GetHashCode();
				if (this.DestTableSchema != null)
					hashCode = hashCode * 59 + this.DestTableSchema.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
