/* 
 * Job management
 *
 * A service that allows management and querying of data services jobs.  Some of the important traits of jobs are:  * A job has a unique `job_id`. * A job can have widely different life-cycles. Typically they represent a single batch job, but they can also represent interactions with the data services that span multiple sessions. * Jobs form a convenient 'container' for registering data service usage, stored and updated on an hourly basis. * When invoking data services, the `job_id` value should be passed in via the `Job-ID` HTTP header in order to register the specific service usage under a specific job. * If no `Job-ID` header is provided, all users also have a surrogate job called `users/{user_id}` which all other data service usage is registered against. * Jobs can exist in hierarchies. A job is considered a child/sub-job of another job when the `parent_job` attribute is set. * Job metadata such as `expected_services` and `expected_record_count` help in reserving necesary credits and other resources when specified. * Normally jobs are owned by an individual user and can only be accessed by this user. But there can also be tenant-scoped jobs in which case the job data can be accessed and managed by all members of the tenant with the relevant roles. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Job
{
    /// <summary>
    /// JobDetailedResponse
    /// </summary>
    [DataContract]
    public partial class JobDetailedResponse : IEquatable<JobDetailedResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobDetailedResponse" /> class.
        /// </summary>
        /// <param name="JobId">The job&#39;s unique ID..</param>
        /// <param name="Origin">The originating product/application/service for which this job was created..</param>
        /// <param name="Owner">The user_id of the job&#39;s owner..</param>
        /// <param name="ParentJob">The parent job&#39;s job_id. May be null if the job does not have a parent job..</param>
        /// <param name="CreatedAt">The time of job creation.</param>
        /// <param name="JobStatus">JobStatus.</param>
        /// <param name="JobStatusDetails">Any additional details pertaining to the most recent job status change.</param>
        /// <param name="CreatedBy">The user_id of the user who created the job..</param>
        /// <param name="UpdatedAt">The last time of updating the job.</param>
        /// <param name="ExpectedServices">An array of the expected services that this job will be consuming, referred to by their service_id..</param>
        /// <param name="ExpectedRecordCount">The expected amount of records that will be processed by the &#x60;expected_services&#x60; in this job.</param>
        /// <param name="AdditionalDetails">Any additional details about the job..</param>
        /// <param name="Usage">Usage.</param>
        public JobDetailedResponse(string JobId = default(string), string Origin = default(string), string Owner = default(string), string ParentJob = default(string), DateTime? CreatedAt = default(DateTime?), JobStatus JobStatus = default(JobStatus), Object JobStatusDetails = default(Object), string CreatedBy = default(string), DateTime? UpdatedAt = default(DateTime?), List<string> ExpectedServices = default(List<string>), long? ExpectedRecordCount = default(long?), Object AdditionalDetails = default(Object), UsageAggregation Usage = default(UsageAggregation))
        {
            this.JobId = JobId;
            this.Origin = Origin;
            this.Owner = Owner;
            this.ParentJob = ParentJob;
            this.CreatedAt = CreatedAt;
            this.JobStatus = JobStatus;
            this.JobStatusDetails = JobStatusDetails;
            this.CreatedBy = CreatedBy;
            this.UpdatedAt = UpdatedAt;
            this.ExpectedServices = ExpectedServices;
            this.ExpectedRecordCount = ExpectedRecordCount;
            this.AdditionalDetails = AdditionalDetails;
            this.Usage = Usage;
        }
        
        /// <summary>
        /// The job&#39;s unique ID.
        /// </summary>
        /// <value>The job&#39;s unique ID.</value>
        [DataMember(Name="job_id", EmitDefaultValue=false)]
        public string JobId { get; set; }

        /// <summary>
        /// The originating product/application/service for which this job was created.
        /// </summary>
        /// <value>The originating product/application/service for which this job was created.</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }

        /// <summary>
        /// The user_id of the job&#39;s owner.
        /// </summary>
        /// <value>The user_id of the job&#39;s owner.</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// The parent job&#39;s job_id. May be null if the job does not have a parent job.
        /// </summary>
        /// <value>The parent job&#39;s job_id. May be null if the job does not have a parent job.</value>
        [DataMember(Name="parent_job", EmitDefaultValue=false)]
        public string ParentJob { get; set; }

        /// <summary>
        /// The time of job creation
        /// </summary>
        /// <value>The time of job creation</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets JobStatus
        /// </summary>
        [DataMember(Name="job_status", EmitDefaultValue=false)]
        public JobStatus JobStatus { get; set; }

        /// <summary>
        /// Any additional details pertaining to the most recent job status change
        /// </summary>
        /// <value>Any additional details pertaining to the most recent job status change</value>
        [DataMember(Name="job_status_details", EmitDefaultValue=false)]
        public Object JobStatusDetails { get; set; }

        /// <summary>
        /// The user_id of the user who created the job.
        /// </summary>
        /// <value>The user_id of the user who created the job.</value>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The last time of updating the job
        /// </summary>
        /// <value>The last time of updating the job</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// An array of the expected services that this job will be consuming, referred to by their service_id.
        /// </summary>
        /// <value>An array of the expected services that this job will be consuming, referred to by their service_id.</value>
        [DataMember(Name="expected_services", EmitDefaultValue=false)]
        public List<string> ExpectedServices { get; set; }

        /// <summary>
        /// The expected amount of records that will be processed by the &#x60;expected_services&#x60; in this job
        /// </summary>
        /// <value>The expected amount of records that will be processed by the &#x60;expected_services&#x60; in this job</value>
        [DataMember(Name="expected_record_count", EmitDefaultValue=false)]
        public long? ExpectedRecordCount { get; set; }

        /// <summary>
        /// Any additional details about the job.
        /// </summary>
        /// <value>Any additional details about the job.</value>
        [DataMember(Name="additional_details", EmitDefaultValue=false)]
        public Object AdditionalDetails { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public UsageAggregation Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobDetailedResponse {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  ParentJob: ").Append(ParentJob).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  JobStatus: ").Append(JobStatus).Append("\n");
            sb.Append("  JobStatusDetails: ").Append(JobStatusDetails).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ExpectedServices: ").Append(ExpectedServices).Append("\n");
            sb.Append("  ExpectedRecordCount: ").Append(ExpectedRecordCount).Append("\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobDetailedResponse);
        }

        /// <summary>
        /// Returns true if JobDetailedResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of JobDetailedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobDetailedResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.ParentJob == input.ParentJob ||
                    (this.ParentJob != null &&
                    this.ParentJob.Equals(input.ParentJob))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.JobStatus == input.JobStatus ||
                    (this.JobStatus != null &&
                    this.JobStatus.Equals(input.JobStatus))
                ) && 
                (
                    this.JobStatusDetails == input.JobStatusDetails ||
                    (this.JobStatusDetails != null &&
                    this.JobStatusDetails.Equals(input.JobStatusDetails))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.ExpectedServices == input.ExpectedServices ||
                    this.ExpectedServices != null &&
                    this.ExpectedServices.SequenceEqual(input.ExpectedServices)
                ) && 
                (
                    this.ExpectedRecordCount == input.ExpectedRecordCount ||
                    (this.ExpectedRecordCount != null &&
                    this.ExpectedRecordCount.Equals(input.ExpectedRecordCount))
                ) && 
                (
                    this.AdditionalDetails == input.AdditionalDetails ||
                    (this.AdditionalDetails != null &&
                    this.AdditionalDetails.Equals(input.AdditionalDetails))
                ) && 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.ParentJob != null)
                    hashCode = hashCode * 59 + this.ParentJob.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.JobStatus != null)
                    hashCode = hashCode * 59 + this.JobStatus.GetHashCode();
                if (this.JobStatusDetails != null)
                    hashCode = hashCode * 59 + this.JobStatusDetails.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.ExpectedServices != null)
                    hashCode = hashCode * 59 + this.ExpectedServices.GetHashCode();
                if (this.ExpectedRecordCount != null)
                    hashCode = hashCode * 59 + this.ExpectedRecordCount.GetHashCode();
                if (this.AdditionalDetails != null)
                    hashCode = hashCode * 59 + this.AdditionalDetails.GetHashCode();
                if (this.Usage != null)
                    hashCode = hashCode * 59 + this.Usage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
