/* 
 * Job management
 *
 * A service that allows management and querying of data services jobs.  Some of the important traits of jobs are:  * A job has a unique `job_id`. * A job can have widely different life-cycles. Typically they represent a single batch job, but they can also represent interactions with the data services that span multiple sessions. * Jobs form a convenient 'container' for registering data service usage, stored and updated on an hourly basis. * When invoking data services, the `job_id` value should be passed in via the `Job-ID` HTTP header in order to register the specific service usage under a specific job. * If no `Job-ID` header is provided, all users also have a surrogate job called `users/{user_id}` which all other data service usage is registered against. * Jobs can exist in hierarchies. A job is considered a child/sub-job of another job when the `parent_job` attribute is set. * Job metadata such as `expected_services` and `expected_record_count` help in reserving necesary credits and other resources when specified. * Normally jobs are owned by an individual user and can only be accessed by this user. But there can also be tenant-scoped jobs in which case the job data can be accessed and managed by all members of the tenant with the relevant roles. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Job
{
    /// <summary>
    /// Defines the high-level status of a job. A job does not necessarily go through all of the states. The default initial state is &#39;CREATED&#39;. A job may be in &#x60;READY_TO_RUN&#x60; state if it has been configured and scheduled to run, but not yet picked up by any processor/worker service yet. The &#x60;STARTED&#x60; state indicates that the job is actively running. Conversely the &#x60;WAITING&#x60; state indicates that the job has started but is waiting for an external resource to provide input before the job can resume. Finally, &#x60;SUCCESS&#x60;, &#x60;CANCELLED&#x60;, &#x60;DELETED&#x60; and &#x60;FAILURE&#x60; are end states, indicating whether the job has finished successfully, was cancelled by the user, was deleted or is in a failure state.
    /// </summary>
    /// <value>Defines the high-level status of a job. A job does not necessarily go through all of the states. The default initial state is &#39;CREATED&#39;. A job may be in &#x60;READY_TO_RUN&#x60; state if it has been configured and scheduled to run, but not yet picked up by any processor/worker service yet. The &#x60;STARTED&#x60; state indicates that the job is actively running. Conversely the &#x60;WAITING&#x60; state indicates that the job has started but is waiting for an external resource to provide input before the job can resume. Finally, &#x60;SUCCESS&#x60;, &#x60;CANCELLED&#x60;, &#x60;DELETED&#x60; and &#x60;FAILURE&#x60; are end states, indicating whether the job has finished successfully, was cancelled by the user, was deleted or is in a failure state.</value>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum JobStatus
    {
        
        /// <summary>
        /// Enum CREATED for value: CREATED
        /// </summary>
        [EnumMember(Value = "CREATED")]
        CREATED = 1,
        
        /// <summary>
        /// Enum READYTORUN for value: READY_TO_RUN
        /// </summary>
        [EnumMember(Value = "READY_TO_RUN")]
        READYTORUN = 2,
        
        /// <summary>
        /// Enum STARTED for value: STARTED
        /// </summary>
        [EnumMember(Value = "STARTED")]
        STARTED = 3,
        
        /// <summary>
        /// Enum WAITING for value: WAITING
        /// </summary>
        [EnumMember(Value = "WAITING")]
        WAITING = 4,
        
        /// <summary>
        /// Enum SUCCESS for value: SUCCESS
        /// </summary>
        [EnumMember(Value = "SUCCESS")]
        SUCCESS = 5,
        
        /// <summary>
        /// Enum FAILURE for value: FAILURE
        /// </summary>
        [EnumMember(Value = "FAILURE")]
        FAILURE = 6,
        
        /// <summary>
        /// Enum CANCELLED for value: CANCELLED
        /// </summary>
        [EnumMember(Value = "CANCELLED")]
        CANCELLED = 7,
        
        /// <summary>
        /// Enum DELETED for value: DELETED
        /// </summary>
        [EnumMember(Value = "DELETED")]
        DELETED = 8
    }
}
