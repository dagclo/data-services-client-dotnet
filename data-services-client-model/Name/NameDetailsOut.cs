/* 
 * Name validation
 *
 * The Name Validation data service parses fields, structured and unstructured,  pertaining to names in your records to offer updates, standardization, and  enrichment of name data. For example, it can provide you with information  to help you analyze and standardize customer contact data. The service is a tool to validate and parse name information and structure name parts.  It can indicate that a part of a name is missing, and assign parts of an input string.  In addition, the service can help indicate that the name belongs to a person,  with given name, middle name, and family name fields, or belongs to an organization.  You can refine the results by using the country code to map the output more closely  to that country's name usage patterns. ##Key functionality: * Formats and capitalizes name parts. Indicates how you wnat to handle different name parts. * Identifies the gender of a person based on the name. * Identifies missing name parts. * Indicates whether a particular name is typically a nickname and suggest other possible nicknames.  
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Quadient.DataServices.Model.Name
{
    /// <summary>
    /// NameDetailsOut
    /// </summary>
    [DataContract]
    public partial class NameDetailsOut : NameDetailsIn,  IEquatable<NameDetailsOut>, IValidatableObject
    {
        /// <summary>
        /// The gender of the person. This field only applies when &#x60;entity_type&#x60; is &#x60;person&#x60;. 
        /// </summary>
        /// <value>The gender of the person. This field only applies when &#x60;entity_type&#x60; is &#x60;person&#x60;. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum Male for value: Male
            /// </summary>
            [EnumMember(Value = "Male")]
            Male = 1,
            
            /// <summary>
            /// Enum Female for value: Female
            /// </summary>
            [EnumMember(Value = "Female")]
            Female = 2,
            
            /// <summary>
            /// Enum Ambiguous for value: Ambiguous
            /// </summary>
            [EnumMember(Value = "Ambiguous")]
            Ambiguous = 3,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 4
        }

        /// <summary>
        /// The gender of the person. This field only applies when &#x60;entity_type&#x60; is &#x60;person&#x60;. 
        /// </summary>
        /// <value>The gender of the person. This field only applies when &#x60;entity_type&#x60; is &#x60;person&#x60;. </value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NameDetailsOut" /> class.
        /// </summary>
        [JsonConstructor]
        protected NameDetailsOut() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NameDetailsOut" /> class.
        /// </summary>
        /// <param name="Nicknames">An optional array of potential nicknames for the name parts of the person. .</param>
        /// <param name="FamilyNamePrefix">One or more words that serve as the prefix to the first family name of the person. This field only applies when &#x60;entity_type&#x60; is &#x60;person&#x60;. .</param>
        /// <param name="FullName">The representation of the full name without any salutation, honorific or title elements. When &#x60;entity_type&#x60; is &#x60;person&#x60;, this always equates to the concatenation of &#x60;given_name&#x60;, &#x60;middle_name&#x60;, &#x60;family_name&#x60;, and &#x60;generation_title&#x60;. The treatment of the &#x60;generation_title&#x60; element depends on the &#x60;generation_title_handling&#x60; configuration. When &#x60;entity_type&#x60; is &#x60;organization&#x60;, this always equates to the concatenation of &#x60;organization_name&#x60; and &#x60;legal_entity&#x60;.  (required).</param>
        /// <param name="Gender">The gender of the person. This field only applies when &#x60;entity_type&#x60; is &#x60;person&#x60;.  (required).</param>
        public NameDetailsOut(List<NicknameItem> Nicknames = default(List<NicknameItem>), string FamilyNamePrefix = default(string), string FullName = default(string), GenderEnum Gender = default(GenderEnum), string Salutation = default(string), string Honorific = default(string), string TitleBefore = default(string), string GivenName = default(string), string MiddleName = default(string), string FamilyName = default(string), string GenerationTitle = default(string), string TitleAfter = default(string)) : base()
        {
            // to ensure "FullName" is required (not null)
            if (FullName == null)
            {
                throw new InvalidDataException("FullName is a required property for NameDetailsOut and cannot be null");
            }
            else
            {
                this.FullName = FullName;
            }
            // to ensure "Gender" is required (not null)
            if (Gender == null)
            {
                throw new InvalidDataException("Gender is a required property for NameDetailsOut and cannot be null");
            }
            else
            {
                this.Gender = Gender;
            }
            this.Nicknames = Nicknames;
            this.FamilyNamePrefix = FamilyNamePrefix;
        }
        
        /// <summary>
        /// An optional array of potential nicknames for the name parts of the person. 
        /// </summary>
        /// <value>An optional array of potential nicknames for the name parts of the person. </value>
        [DataMember(Name="nicknames", EmitDefaultValue=false)]
        public List<NicknameItem> Nicknames { get; set; }

        /// <summary>
        /// One or more words that serve as the prefix to the first family name of the person. This field only applies when &#x60;entity_type&#x60; is &#x60;person&#x60;. 
        /// </summary>
        /// <value>One or more words that serve as the prefix to the first family name of the person. This field only applies when &#x60;entity_type&#x60; is &#x60;person&#x60;. </value>
        [DataMember(Name="family_name_prefix", EmitDefaultValue=false)]
        public string FamilyNamePrefix { get; set; }

        /// <summary>
        /// The representation of the full name without any salutation, honorific or title elements. When &#x60;entity_type&#x60; is &#x60;person&#x60;, this always equates to the concatenation of &#x60;given_name&#x60;, &#x60;middle_name&#x60;, &#x60;family_name&#x60;, and &#x60;generation_title&#x60;. The treatment of the &#x60;generation_title&#x60; element depends on the &#x60;generation_title_handling&#x60; configuration. When &#x60;entity_type&#x60; is &#x60;organization&#x60;, this always equates to the concatenation of &#x60;organization_name&#x60; and &#x60;legal_entity&#x60;. 
        /// </summary>
        /// <value>The representation of the full name without any salutation, honorific or title elements. When &#x60;entity_type&#x60; is &#x60;person&#x60;, this always equates to the concatenation of &#x60;given_name&#x60;, &#x60;middle_name&#x60;, &#x60;family_name&#x60;, and &#x60;generation_title&#x60;. The treatment of the &#x60;generation_title&#x60; element depends on the &#x60;generation_title_handling&#x60; configuration. When &#x60;entity_type&#x60; is &#x60;organization&#x60;, this always equates to the concatenation of &#x60;organization_name&#x60; and &#x60;legal_entity&#x60;. </value>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NameDetailsOut {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Nicknames: ").Append(Nicknames).Append("\n");
            sb.Append("  FamilyNamePrefix: ").Append(FamilyNamePrefix).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NameDetailsOut);
        }

        /// <summary>
        /// Returns true if NameDetailsOut instances are equal
        /// </summary>
        /// <param name="input">Instance of NameDetailsOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NameDetailsOut input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Nicknames == input.Nicknames ||
                    this.Nicknames != null &&
                    this.Nicknames.SequenceEqual(input.Nicknames)
                ) && base.Equals(input) && 
                (
                    this.FamilyNamePrefix == input.FamilyNamePrefix ||
                    (this.FamilyNamePrefix != null &&
                    this.FamilyNamePrefix.Equals(input.FamilyNamePrefix))
                ) && base.Equals(input) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && base.Equals(input) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Nicknames != null)
                    hashCode = hashCode * 59 + this.Nicknames.GetHashCode();
                if (this.FamilyNamePrefix != null)
                    hashCode = hashCode * 59 + this.FamilyNamePrefix.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
