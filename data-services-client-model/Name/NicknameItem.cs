/* 
 * Name validation
 *
 * The Name Validation data service parses fields, structured and unstructured,  pertaining to names in your records to offer updates, standardization, and  enrichment of name data. For example, it can provide you with information  to help you analyze and standardize customer contact data. The service is a tool to validate and parse name information and structure name parts.  It can indicate that a part of a name is missing, and assign parts of an input string.  In addition, the service can help indicate that the name belongs to a person,  with given name, middle name, and family name fields, or belongs to an organization.  You can refine the results by using the country code to map the output more closely  to that country's name usage patterns. ## Key functionality: * Formats and capitalizes name parts. Indicates how you wnat to handle different name parts. * Identifies the gender of a person based on the name. * Identifies missing name parts. * Indicates whether a particular name is typically a nickname and suggest other possible nicknames.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Name
{
    /// <summary>
    /// NicknameItem
    /// </summary>
    [DataContract]
    public partial class NicknameItem : IEquatable<NicknameItem>, IValidatableObject
    {
        /// <summary>
        /// Describes in which field the potential nickname was found.
        /// </summary>
        /// <value>Describes in which field the potential nickname was found.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldEnum
        {
            
            /// <summary>
            /// Enum Givenname for value: given_name
            /// </summary>
            [EnumMember(Value = "given_name")]
            Givenname = 1,
            
            /// <summary>
            /// Enum Middlename for value: middle_name
            /// </summary>
            [EnumMember(Value = "middle_name")]
            Middlename = 2,
            
            /// <summary>
            /// Enum Familyname for value: family_name
            /// </summary>
            [EnumMember(Value = "family_name")]
            Familyname = 3,
            
            /// <summary>
            /// Enum Generationtitle for value: generation_title
            /// </summary>
            [EnumMember(Value = "generation_title")]
            Generationtitle = 4
        }

        /// <summary>
        /// Describes in which field the potential nickname was found.
        /// </summary>
        /// <value>Describes in which field the potential nickname was found.</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public FieldEnum? Field { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NicknameItem" /> class.
        /// </summary>
        /// <param name="Field">Describes in which field the potential nickname was found..</param>
        /// <param name="Orig">The original input name part that may have a nickname or may be a nickname..</param>
        /// <param name="Alternate">The name part that may be a alternate for the original input..</param>
        public NicknameItem(FieldEnum? Field = default(FieldEnum?), string Orig = default(string), string Alternate = default(string))
        {
            this.Field = Field;
            this.Orig = Orig;
            this.Alternate = Alternate;
        }
        

        /// <summary>
        /// The original input name part that may have a nickname or may be a nickname.
        /// </summary>
        /// <value>The original input name part that may have a nickname or may be a nickname.</value>
        [DataMember(Name="orig", EmitDefaultValue=false)]
        public string Orig { get; set; }

        /// <summary>
        /// The name part that may be a alternate for the original input.
        /// </summary>
        /// <value>The name part that may be a alternate for the original input.</value>
        [DataMember(Name="alternate", EmitDefaultValue=false)]
        public string Alternate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NicknameItem {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Orig: ").Append(Orig).Append("\n");
            sb.Append("  Alternate: ").Append(Alternate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NicknameItem);
        }

        /// <summary>
        /// Returns true if NicknameItem instances are equal
        /// </summary>
        /// <param name="input">Instance of NicknameItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NicknameItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Orig == input.Orig ||
                    (this.Orig != null &&
                    this.Orig.Equals(input.Orig))
                ) && 
                (
                    this.Alternate == input.Alternate ||
                    (this.Alternate != null &&
                    this.Alternate.Equals(input.Alternate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.Orig != null)
                    hashCode = hashCode * 59 + this.Orig.GetHashCode();
                if (this.Alternate != null)
                    hashCode = hashCode * 59 + this.Alternate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
