/* 
 * Name validation
 *
 * The Name Validation data service parses fields, structured and unstructured,  pertaining to names in your records to offer updates, standardization, and  enrichment of name data. For example, it can provide you with information  to help you analyze and standardize customer contact data. The service is a tool to validate and parse name information and structure name parts.  It can indicate that a part of a name is missing, and assign parts of an input string.  In addition, the service can help indicate that the name belongs to a person,  with given name, middle name, and family name fields, or belongs to an organization.  You can refine the results by using the country code to map the output more closely  to that country's name usage patterns. ## Key functionality: * Formats and capitalizes name parts. Indicates how you wnat to handle different name parts. * Identifies the gender of a person based on the name. * Identifies missing name parts. * Indicates whether a particular name is typically a nickname and suggest other possible nicknames.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Name
{
    /// <summary>
    /// OutcomeDefinition
    /// </summary>
    [DataContract]
    public partial class OutcomeDefinition : IEquatable<OutcomeDefinition>, IValidatableObject
    {
        /// <summary>
        /// The final status of the object. 
        /// </summary>
        /// <value>The final status of the object. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum Valid for value: Valid
            /// </summary>
            [EnumMember(Value = "Valid")]
            Valid = 1,
            
            /// <summary>
            /// Enum Corrected for value: Corrected
            /// </summary>
            [EnumMember(Value = "Corrected")]
            Corrected = 2,
            
            /// <summary>
            /// Enum Invalid for value: Invalid
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid = 3,
            
            /// <summary>
            /// Enum Skipped for value: Skipped
            /// </summary>
            [EnumMember(Value = "Skipped")]
            Skipped = 4,
            
            /// <summary>
            /// Enum Doubtful for value: Doubtful
            /// </summary>
            [EnumMember(Value = "Doubtful")]
            Doubtful = 5
        }

        /// <summary>
        /// The final status of the object. 
        /// </summary>
        /// <value>The final status of the object. </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutcomeDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutcomeDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutcomeDefinition" /> class.
        /// </summary>
        /// <param name="Category">The final status of the object.  (required).</param>
        /// <param name="Codes">An object that contains correction codes as keys and messages as values. * &#x60;A11&#x60; - Given name matched to reference data. * &#x60;A12&#x60; - Given name inferred, but not matched to reference data. * &#x60;A13&#x60; - Given name initial(s) identified. * &#x60;A14&#x60; - No given name identified. * &#x60;A15&#x60; - Possible given name nicknames found. * &#x60;A21&#x60; - Family name matched to reference data. * &#x60;A22&#x60; - Family name inferred, but not matched to reference data. * &#x60;A23&#x60; - Family name initial(s) identified. * &#x60;A24&#x60; - No family name identified. * &#x60;A25&#x60; - Family name prefix(es) identified. * &#x60;C01&#x60; - Single name identified. * &#x60;C02&#x60; - Multiple names identified. * &#x60;C03&#x60; - Entity was believed to be person, but found organization. * &#x60;C04&#x60; - Entity was believed to be person, but found job title. * &#x60;C05&#x60; - Entity was believed to be organization, but found person. * &#x60;C06&#x60; - Entity was believed to be organization, but found job title. * &#x60;C07&#x60; - Entity was believed to be job title, but found person. * &#x60;C08&#x60; - Entity was believed to be job title, but found organization. * &#x60;C11&#x60; - Name capitalization corrected. * &#x60;C12&#x60; - Gender inferred from given name. * &#x60;C13&#x60; - Gender inferred from honorific. * &#x60;C14&#x60; - Gender inferred from title. * &#x60;E01&#x60; - Name input empty or blank. * &#x60;E02&#x60; - Name input too long.  (required).</param>
        public OutcomeDefinition(CategoryEnum Category = default(CategoryEnum), Dictionary<string, string> Codes = default(Dictionary<string, string>))
        {
            // to ensure "Category" is required (not null)
            if (Category == null)
            {
                throw new InvalidDataException("Category is a required property for OutcomeDefinition and cannot be null");
            }
            else
            {
                this.Category = Category;
            }
            // to ensure "Codes" is required (not null)
            if (Codes == null)
            {
                throw new InvalidDataException("Codes is a required property for OutcomeDefinition and cannot be null");
            }
            else
            {
                this.Codes = Codes;
            }
        }
        

        /// <summary>
        /// An object that contains correction codes as keys and messages as values. * &#x60;A11&#x60; - Given name matched to reference data. * &#x60;A12&#x60; - Given name inferred, but not matched to reference data. * &#x60;A13&#x60; - Given name initial(s) identified. * &#x60;A14&#x60; - No given name identified. * &#x60;A15&#x60; - Possible given name nicknames found. * &#x60;A21&#x60; - Family name matched to reference data. * &#x60;A22&#x60; - Family name inferred, but not matched to reference data. * &#x60;A23&#x60; - Family name initial(s) identified. * &#x60;A24&#x60; - No family name identified. * &#x60;A25&#x60; - Family name prefix(es) identified. * &#x60;C01&#x60; - Single name identified. * &#x60;C02&#x60; - Multiple names identified. * &#x60;C03&#x60; - Entity was believed to be person, but found organization. * &#x60;C04&#x60; - Entity was believed to be person, but found job title. * &#x60;C05&#x60; - Entity was believed to be organization, but found person. * &#x60;C06&#x60; - Entity was believed to be organization, but found job title. * &#x60;C07&#x60; - Entity was believed to be job title, but found person. * &#x60;C08&#x60; - Entity was believed to be job title, but found organization. * &#x60;C11&#x60; - Name capitalization corrected. * &#x60;C12&#x60; - Gender inferred from given name. * &#x60;C13&#x60; - Gender inferred from honorific. * &#x60;C14&#x60; - Gender inferred from title. * &#x60;E01&#x60; - Name input empty or blank. * &#x60;E02&#x60; - Name input too long. 
        /// </summary>
        /// <value>An object that contains correction codes as keys and messages as values. * &#x60;A11&#x60; - Given name matched to reference data. * &#x60;A12&#x60; - Given name inferred, but not matched to reference data. * &#x60;A13&#x60; - Given name initial(s) identified. * &#x60;A14&#x60; - No given name identified. * &#x60;A15&#x60; - Possible given name nicknames found. * &#x60;A21&#x60; - Family name matched to reference data. * &#x60;A22&#x60; - Family name inferred, but not matched to reference data. * &#x60;A23&#x60; - Family name initial(s) identified. * &#x60;A24&#x60; - No family name identified. * &#x60;A25&#x60; - Family name prefix(es) identified. * &#x60;C01&#x60; - Single name identified. * &#x60;C02&#x60; - Multiple names identified. * &#x60;C03&#x60; - Entity was believed to be person, but found organization. * &#x60;C04&#x60; - Entity was believed to be person, but found job title. * &#x60;C05&#x60; - Entity was believed to be organization, but found person. * &#x60;C06&#x60; - Entity was believed to be organization, but found job title. * &#x60;C07&#x60; - Entity was believed to be job title, but found person. * &#x60;C08&#x60; - Entity was believed to be job title, but found organization. * &#x60;C11&#x60; - Name capitalization corrected. * &#x60;C12&#x60; - Gender inferred from given name. * &#x60;C13&#x60; - Gender inferred from honorific. * &#x60;C14&#x60; - Gender inferred from title. * &#x60;E01&#x60; - Name input empty or blank. * &#x60;E02&#x60; - Name input too long. </value>
        [DataMember(Name="codes", EmitDefaultValue=false)]
        public Dictionary<string, string> Codes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutcomeDefinition {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutcomeDefinition);
        }

        /// <summary>
        /// Returns true if OutcomeDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of OutcomeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutcomeDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Codes == input.Codes ||
                    this.Codes != null &&
                    this.Codes.SequenceEqual(input.Codes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Codes != null)
                    hashCode = hashCode * 59 + this.Codes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
