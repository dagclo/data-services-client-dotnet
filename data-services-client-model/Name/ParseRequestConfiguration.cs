/* 
 * Name validation
 *
 * The Name Validation data service parses fields, structured and unstructured,  pertaining to names in your records to offer updates, standardization, and  enrichment of name data. For example, it can provide you with information  to help you analyze and standardize customer contact data. The service is a tool to validate and parse name information and structure name parts.  It can indicate that a part of a name is missing, and assign parts of an input string.  In addition, the service can help indicate that the name belongs to a person,  with given name, middle name, and family name fields, or belongs to an organization.  You can refine the results by using the country code to map the output more closely  to that country's name usage patterns. ## Key functionality: * Formats and capitalizes name parts. Indicates how you wnat to handle different name parts. * Identifies the gender of a person based on the name. * Identifies missing name parts. * Indicates whether a particular name is typically a nickname and suggest other possible nicknames.
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Name
{
    /// <summary>
    /// ParseRequestConfiguration
    /// </summary>
    [DataContract]
    public partial class ParseRequestConfiguration : IEquatable<ParseRequestConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseRequestConfiguration" /> class.
        /// </summary>
        /// <param name="EnableCapitalization">Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens.  (default to true).</param>
        /// <param name="EnableNicknames">Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name.  (default to true).</param>
        /// <param name="MiddleNameHandling">Determines whether middle names are included in the output and how they are handled. The following options are available: * &#x60;Separate&#x60; uses a parser with middle name awareness and puts the middle name tokens into the separate &#x60;middle_name&#x60; field. * &#x60;Allocate&#x60; uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields.  .</param>
        /// <param name="GenerationTitleHandling">Determines how to handle generation titles. The following options are available: * &#x60;Separate&#x60; keeps generation titles in the separate &#x60;generation_title&#x60; attribute. * &#x60;Familyname&#x60; always appends generation titles to the family name. * &#x60;Omit&#x60; removes generation titles. .</param>
        /// <param name="DefaultBelievedEntityType">The default &#x60;believed_entity_type&#x60; value to apply to names in the request..</param>
        /// <param name="PersonJobTitleHandling">Defines how the service should handle a job title succeeding a person name (for example &#x60;John Doe, Account Manager&#x60;). There are two options in this case: Either consider the job title to be a named entity alongside &#x60;person&#x60; and &#x60;organization&#x60; entity types, or to consider job titles to be an attribute of a &#x60;person&#x60; entity. In the latter case the title will be appended to the &#x60;title_after&#x60; field which is normally used for academic titles and such. .</param>
        /// <param name="EntityChangeCategory">Defines how the service should respond (via the &#x60;category&#x60; attribute) to situations where a different type of entity is found than expected/believed (see &#x60;believed_entity_type&#x60;). By default the service treats this as a correction, but for more strict behaviour the value &#x60;Invalid&#x60; may be desired. .</param>
        /// <param name="DefaultCountry">The default &#x60;country&#x60; value to apply to names where no country is supplied. The ISO 3166 2-letter country code is preferred. .</param>
        /// <param name="DefaultLanguage">The default &#x60;language&#x60; value to apply to names where no language is supplied..</param>
        /// <param name="EnableDistinctiveTerms">Indicates whether or not to enable the identification of \&quot;distinctive terms\&quot; (usually words) in organization names or job titles. These terms are provided for situations where the entity name may contain a set of generic terms as well as terms that are more distinctive. Separating out the distinctive terms may make it easier to compare names since they have less generic \&quot;noise\&quot;.  (default to false).</param>
        public ParseRequestConfiguration(bool? EnableCapitalization = true, bool? EnableNicknames = true, MiddleNameHandling MiddleNameHandling = default(MiddleNameHandling), GenerationTitleHandling GenerationTitleHandling = default(GenerationTitleHandling), EntityType DefaultBelievedEntityType = default(EntityType), PersonJobTitleHandling PersonJobTitleHandling = default(PersonJobTitleHandling), EntityChangeCategory EntityChangeCategory = default(EntityChangeCategory), string DefaultCountry = default(string), string DefaultLanguage = default(string), bool? EnableDistinctiveTerms = false)
        {
            // use default value if no "EnableCapitalization" provided
            if (EnableCapitalization == null)
            {
                this.EnableCapitalization = true;
            }
            else
            {
                this.EnableCapitalization = EnableCapitalization;
            }
            // use default value if no "EnableNicknames" provided
            if (EnableNicknames == null)
            {
                this.EnableNicknames = true;
            }
            else
            {
                this.EnableNicknames = EnableNicknames;
            }
            this.MiddleNameHandling = MiddleNameHandling;
            this.GenerationTitleHandling = GenerationTitleHandling;
            this.DefaultBelievedEntityType = DefaultBelievedEntityType;
            this.PersonJobTitleHandling = PersonJobTitleHandling;
            this.EntityChangeCategory = EntityChangeCategory;
            this.DefaultCountry = DefaultCountry;
            this.DefaultLanguage = DefaultLanguage;
            // use default value if no "EnableDistinctiveTerms" provided
            if (EnableDistinctiveTerms == null)
            {
                this.EnableDistinctiveTerms = false;
            }
            else
            {
                this.EnableDistinctiveTerms = EnableDistinctiveTerms;
            }
        }
        
        /// <summary>
        /// Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens. 
        /// </summary>
        /// <value>Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens. </value>
        [DataMember(Name="enable_capitalization", EmitDefaultValue=false)]
        public bool? EnableCapitalization { get; set; }

        /// <summary>
        /// Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name. 
        /// </summary>
        /// <value>Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name. </value>
        [DataMember(Name="enable_nicknames", EmitDefaultValue=false)]
        public bool? EnableNicknames { get; set; }

        /// <summary>
        /// Determines whether middle names are included in the output and how they are handled. The following options are available: * &#x60;Separate&#x60; uses a parser with middle name awareness and puts the middle name tokens into the separate &#x60;middle_name&#x60; field. * &#x60;Allocate&#x60; uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields.  
        /// </summary>
        /// <value>Determines whether middle names are included in the output and how they are handled. The following options are available: * &#x60;Separate&#x60; uses a parser with middle name awareness and puts the middle name tokens into the separate &#x60;middle_name&#x60; field. * &#x60;Allocate&#x60; uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields.  </value>
        [DataMember(Name="middle_name_handling", EmitDefaultValue=false)]
        public MiddleNameHandling MiddleNameHandling { get; set; }

        /// <summary>
        /// Determines how to handle generation titles. The following options are available: * &#x60;Separate&#x60; keeps generation titles in the separate &#x60;generation_title&#x60; attribute. * &#x60;Familyname&#x60; always appends generation titles to the family name. * &#x60;Omit&#x60; removes generation titles. 
        /// </summary>
        /// <value>Determines how to handle generation titles. The following options are available: * &#x60;Separate&#x60; keeps generation titles in the separate &#x60;generation_title&#x60; attribute. * &#x60;Familyname&#x60; always appends generation titles to the family name. * &#x60;Omit&#x60; removes generation titles. </value>
        [DataMember(Name="generation_title_handling", EmitDefaultValue=false)]
        public GenerationTitleHandling GenerationTitleHandling { get; set; }

        /// <summary>
        /// The default &#x60;believed_entity_type&#x60; value to apply to names in the request.
        /// </summary>
        /// <value>The default &#x60;believed_entity_type&#x60; value to apply to names in the request.</value>
        [DataMember(Name="default_believed_entity_type", EmitDefaultValue=false)]
        public EntityType DefaultBelievedEntityType { get; set; }

        /// <summary>
        /// Defines how the service should handle a job title succeeding a person name (for example &#x60;John Doe, Account Manager&#x60;). There are two options in this case: Either consider the job title to be a named entity alongside &#x60;person&#x60; and &#x60;organization&#x60; entity types, or to consider job titles to be an attribute of a &#x60;person&#x60; entity. In the latter case the title will be appended to the &#x60;title_after&#x60; field which is normally used for academic titles and such. 
        /// </summary>
        /// <value>Defines how the service should handle a job title succeeding a person name (for example &#x60;John Doe, Account Manager&#x60;). There are two options in this case: Either consider the job title to be a named entity alongside &#x60;person&#x60; and &#x60;organization&#x60; entity types, or to consider job titles to be an attribute of a &#x60;person&#x60; entity. In the latter case the title will be appended to the &#x60;title_after&#x60; field which is normally used for academic titles and such. </value>
        [DataMember(Name="person_job_title_handling", EmitDefaultValue=false)]
        public PersonJobTitleHandling PersonJobTitleHandling { get; set; }

        /// <summary>
        /// Defines how the service should respond (via the &#x60;category&#x60; attribute) to situations where a different type of entity is found than expected/believed (see &#x60;believed_entity_type&#x60;). By default the service treats this as a correction, but for more strict behaviour the value &#x60;Invalid&#x60; may be desired. 
        /// </summary>
        /// <value>Defines how the service should respond (via the &#x60;category&#x60; attribute) to situations where a different type of entity is found than expected/believed (see &#x60;believed_entity_type&#x60;). By default the service treats this as a correction, but for more strict behaviour the value &#x60;Invalid&#x60; may be desired. </value>
        [DataMember(Name="entity_change_category", EmitDefaultValue=false)]
        public EntityChangeCategory EntityChangeCategory { get; set; }

        /// <summary>
        /// The default &#x60;country&#x60; value to apply to names where no country is supplied. The ISO 3166 2-letter country code is preferred. 
        /// </summary>
        /// <value>The default &#x60;country&#x60; value to apply to names where no country is supplied. The ISO 3166 2-letter country code is preferred. </value>
        [DataMember(Name="default_country", EmitDefaultValue=false)]
        public string DefaultCountry { get; set; }

        /// <summary>
        /// The default &#x60;language&#x60; value to apply to names where no language is supplied.
        /// </summary>
        /// <value>The default &#x60;language&#x60; value to apply to names where no language is supplied.</value>
        [DataMember(Name="default_language", EmitDefaultValue=false)]
        public string DefaultLanguage { get; set; }

        /// <summary>
        /// Indicates whether or not to enable the identification of \&quot;distinctive terms\&quot; (usually words) in organization names or job titles. These terms are provided for situations where the entity name may contain a set of generic terms as well as terms that are more distinctive. Separating out the distinctive terms may make it easier to compare names since they have less generic \&quot;noise\&quot;. 
        /// </summary>
        /// <value>Indicates whether or not to enable the identification of \&quot;distinctive terms\&quot; (usually words) in organization names or job titles. These terms are provided for situations where the entity name may contain a set of generic terms as well as terms that are more distinctive. Separating out the distinctive terms may make it easier to compare names since they have less generic \&quot;noise\&quot;. </value>
        [DataMember(Name="enable_distinctive_terms", EmitDefaultValue=false)]
        public bool? EnableDistinctiveTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParseRequestConfiguration {\n");
            sb.Append("  EnableCapitalization: ").Append(EnableCapitalization).Append("\n");
            sb.Append("  EnableNicknames: ").Append(EnableNicknames).Append("\n");
            sb.Append("  MiddleNameHandling: ").Append(MiddleNameHandling).Append("\n");
            sb.Append("  GenerationTitleHandling: ").Append(GenerationTitleHandling).Append("\n");
            sb.Append("  DefaultBelievedEntityType: ").Append(DefaultBelievedEntityType).Append("\n");
            sb.Append("  PersonJobTitleHandling: ").Append(PersonJobTitleHandling).Append("\n");
            sb.Append("  EntityChangeCategory: ").Append(EntityChangeCategory).Append("\n");
            sb.Append("  DefaultCountry: ").Append(DefaultCountry).Append("\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  EnableDistinctiveTerms: ").Append(EnableDistinctiveTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParseRequestConfiguration);
        }

        /// <summary>
        /// Returns true if ParseRequestConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ParseRequestConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParseRequestConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableCapitalization == input.EnableCapitalization ||
                    (this.EnableCapitalization != null &&
                    this.EnableCapitalization.Equals(input.EnableCapitalization))
                ) && 
                (
                    this.EnableNicknames == input.EnableNicknames ||
                    (this.EnableNicknames != null &&
                    this.EnableNicknames.Equals(input.EnableNicknames))
                ) && 
                (
                    this.MiddleNameHandling == input.MiddleNameHandling ||
                    (this.MiddleNameHandling != null &&
                    this.MiddleNameHandling.Equals(input.MiddleNameHandling))
                ) && 
                (
                    this.GenerationTitleHandling == input.GenerationTitleHandling ||
                    (this.GenerationTitleHandling != null &&
                    this.GenerationTitleHandling.Equals(input.GenerationTitleHandling))
                ) && 
                (
                    this.DefaultBelievedEntityType == input.DefaultBelievedEntityType ||
                    (this.DefaultBelievedEntityType != null &&
                    this.DefaultBelievedEntityType.Equals(input.DefaultBelievedEntityType))
                ) && 
                (
                    this.PersonJobTitleHandling == input.PersonJobTitleHandling ||
                    (this.PersonJobTitleHandling != null &&
                    this.PersonJobTitleHandling.Equals(input.PersonJobTitleHandling))
                ) && 
                (
                    this.EntityChangeCategory == input.EntityChangeCategory ||
                    (this.EntityChangeCategory != null &&
                    this.EntityChangeCategory.Equals(input.EntityChangeCategory))
                ) && 
                (
                    this.DefaultCountry == input.DefaultCountry ||
                    (this.DefaultCountry != null &&
                    this.DefaultCountry.Equals(input.DefaultCountry))
                ) && 
                (
                    this.DefaultLanguage == input.DefaultLanguage ||
                    (this.DefaultLanguage != null &&
                    this.DefaultLanguage.Equals(input.DefaultLanguage))
                ) && 
                (
                    this.EnableDistinctiveTerms == input.EnableDistinctiveTerms ||
                    (this.EnableDistinctiveTerms != null &&
                    this.EnableDistinctiveTerms.Equals(input.EnableDistinctiveTerms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableCapitalization != null)
                    hashCode = hashCode * 59 + this.EnableCapitalization.GetHashCode();
                if (this.EnableNicknames != null)
                    hashCode = hashCode * 59 + this.EnableNicknames.GetHashCode();
                if (this.MiddleNameHandling != null)
                    hashCode = hashCode * 59 + this.MiddleNameHandling.GetHashCode();
                if (this.GenerationTitleHandling != null)
                    hashCode = hashCode * 59 + this.GenerationTitleHandling.GetHashCode();
                if (this.DefaultBelievedEntityType != null)
                    hashCode = hashCode * 59 + this.DefaultBelievedEntityType.GetHashCode();
                if (this.PersonJobTitleHandling != null)
                    hashCode = hashCode * 59 + this.PersonJobTitleHandling.GetHashCode();
                if (this.EntityChangeCategory != null)
                    hashCode = hashCode * 59 + this.EntityChangeCategory.GetHashCode();
                if (this.DefaultCountry != null)
                    hashCode = hashCode * 59 + this.DefaultCountry.GetHashCode();
                if (this.DefaultLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultLanguage.GetHashCode();
                if (this.EnableDistinctiveTerms != null)
                    hashCode = hashCode * 59 + this.EnableDistinctiveTerms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
