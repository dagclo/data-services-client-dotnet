/* 
 * Name validation
 *
 * The Name Validation data service parses fields, structured and unstructured,  pertaining to names in your records to offer updates, standardization, and  enrichment of name data. For example, it can provide you with information  to help you analyze and standardize customer contact data. The service is a tool to validate and parse name information and structure name parts.  It can indicate that a part of a name is missing, and assign parts of an input string.  In addition, the service can help indicate that the name belongs to a person,  with given name, middle name, and family name fields, or belongs to an organization.  You can refine the results by using the country code to map the output more closely  to that country's name usage patterns. ##Key functionality: * Formats and capitalizes name parts. Indicates how you wnat to handle different name parts. * Identifies the gender of a person based on the name. * Identifies missing name parts. * Indicates whether a particular name is typically a nickname and suggest other possible nicknames.  
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Name
{
    /// <summary>
    /// ParseRequestConfiguration
    /// </summary>
    [DataContract]
    public partial class ParseRequestConfiguration :  IEquatable<ParseRequestConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Defines how to handle unstructured name input that seems to contain multiple entities (persons, companies, and so forth). You can choose to either keep input names as a &#x60;Single&#x60; output item, or to &#x60;Split&#x60; them, which outputs multiple elements in the &#x60;names&#x60; response attribute. 
        /// </summary>
        /// <value>Defines how to handle unstructured name input that seems to contain multiple entities (persons, companies, and so forth). You can choose to either keep input names as a &#x60;Single&#x60; output item, or to &#x60;Split&#x60; them, which outputs multiple elements in the &#x60;names&#x60; response attribute. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MultiEntityHandlingEnum
        {
            
            /// <summary>
            /// Enum Single for value: Single
            /// </summary>
            [EnumMember(Value = "Single")]
            Single = 1,
            
            /// <summary>
            /// Enum Split for value: Split
            /// </summary>
            [EnumMember(Value = "Split")]
            Split = 2
        }

        /// <summary>
        /// Defines how to handle unstructured name input that seems to contain multiple entities (persons, companies, and so forth). You can choose to either keep input names as a &#x60;Single&#x60; output item, or to &#x60;Split&#x60; them, which outputs multiple elements in the &#x60;names&#x60; response attribute. 
        /// </summary>
        /// <value>Defines how to handle unstructured name input that seems to contain multiple entities (persons, companies, and so forth). You can choose to either keep input names as a &#x60;Single&#x60; output item, or to &#x60;Split&#x60; them, which outputs multiple elements in the &#x60;names&#x60; response attribute. </value>
        [DataMember(Name="multi_entity_handling", EmitDefaultValue=false)]
        public MultiEntityHandlingEnum? MultiEntityHandling { get; set; }
        /// <summary>
        /// Determines whether middle names are included in the output and how they are handled. The following options are available: * &#x60;Separate&#x60; uses a parser with middle name awareness and puts the middle name tokens into the separate &#x60;middle_name&#x60; field. * &#x60;Allocate&#x60; uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields.  
        /// </summary>
        /// <value>Determines whether middle names are included in the output and how they are handled. The following options are available: * &#x60;Separate&#x60; uses a parser with middle name awareness and puts the middle name tokens into the separate &#x60;middle_name&#x60; field. * &#x60;Allocate&#x60; uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields.  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MiddleNameHandlingEnum
        {
            
            /// <summary>
            /// Enum Separate for value: Separate
            /// </summary>
            [EnumMember(Value = "Separate")]
            Separate = 1,
            
            /// <summary>
            /// Enum Allocate for value: Allocate
            /// </summary>
            [EnumMember(Value = "Allocate")]
            Allocate = 2
        }

        /// <summary>
        /// Determines whether middle names are included in the output and how they are handled. The following options are available: * &#x60;Separate&#x60; uses a parser with middle name awareness and puts the middle name tokens into the separate &#x60;middle_name&#x60; field. * &#x60;Allocate&#x60; uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields.  
        /// </summary>
        /// <value>Determines whether middle names are included in the output and how they are handled. The following options are available: * &#x60;Separate&#x60; uses a parser with middle name awareness and puts the middle name tokens into the separate &#x60;middle_name&#x60; field. * &#x60;Allocate&#x60; uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields.  </value>
        [DataMember(Name="middle_name_handling", EmitDefaultValue=false)]
        public MiddleNameHandlingEnum? MiddleNameHandling { get; set; }
        /// <summary>
        /// Determines how to handle generation titles. The following options are available: * &#x60;Separate&#x60; keeps generation titles in the separate &#x60;generation_title&#x60; attribute. * &#x60;Familyname&#x60; always appends generation titles to the family name. * &#x60;Omit&#x60; removes generation titles. 
        /// </summary>
        /// <value>Determines how to handle generation titles. The following options are available: * &#x60;Separate&#x60; keeps generation titles in the separate &#x60;generation_title&#x60; attribute. * &#x60;Familyname&#x60; always appends generation titles to the family name. * &#x60;Omit&#x60; removes generation titles. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenerationTitleHandlingEnum
        {
            
            /// <summary>
            /// Enum Separate for value: Separate
            /// </summary>
            [EnumMember(Value = "Separate")]
            Separate = 1,
            
            /// <summary>
            /// Enum Familyname for value: Familyname
            /// </summary>
            [EnumMember(Value = "Familyname")]
            Familyname = 2,
            
            /// <summary>
            /// Enum Omit for value: Omit
            /// </summary>
            [EnumMember(Value = "Omit")]
            Omit = 3
        }

        /// <summary>
        /// Determines how to handle generation titles. The following options are available: * &#x60;Separate&#x60; keeps generation titles in the separate &#x60;generation_title&#x60; attribute. * &#x60;Familyname&#x60; always appends generation titles to the family name. * &#x60;Omit&#x60; removes generation titles. 
        /// </summary>
        /// <value>Determines how to handle generation titles. The following options are available: * &#x60;Separate&#x60; keeps generation titles in the separate &#x60;generation_title&#x60; attribute. * &#x60;Familyname&#x60; always appends generation titles to the family name. * &#x60;Omit&#x60; removes generation titles. </value>
        [DataMember(Name="generation_title_handling", EmitDefaultValue=false)]
        public GenerationTitleHandlingEnum? GenerationTitleHandling { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseRequestConfiguration" /> class.
        /// </summary>
        /// <param name="EnableCapitalization">Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens.  (default to true).</param>
        /// <param name="EnableNicknames">Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name.  (default to true).</param>
        /// <param name="MultiEntityHandling">Defines how to handle unstructured name input that seems to contain multiple entities (persons, companies, and so forth). You can choose to either keep input names as a &#x60;Single&#x60; output item, or to &#x60;Split&#x60; them, which outputs multiple elements in the &#x60;names&#x60; response attribute.  (default to MultiEntityHandlingEnum.Single).</param>
        /// <param name="MiddleNameHandling">Determines whether middle names are included in the output and how they are handled. The following options are available: * &#x60;Separate&#x60; uses a parser with middle name awareness and puts the middle name tokens into the separate &#x60;middle_name&#x60; field. * &#x60;Allocate&#x60; uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields.   (default to MiddleNameHandlingEnum.Separate).</param>
        /// <param name="GenerationTitleHandling">Determines how to handle generation titles. The following options are available: * &#x60;Separate&#x60; keeps generation titles in the separate &#x60;generation_title&#x60; attribute. * &#x60;Familyname&#x60; always appends generation titles to the family name. * &#x60;Omit&#x60; removes generation titles.  (default to GenerationTitleHandlingEnum.Separate).</param>
        /// <param name="DefaultCountry">The default &#x60;country&#x60; value to apply to names where no country is supplied. The ISO 3166 2-letter country code is preferred. .</param>
        public ParseRequestConfiguration(bool? EnableCapitalization = true, bool? EnableNicknames = true, MultiEntityHandlingEnum? MultiEntityHandling = MultiEntityHandlingEnum.Single, MiddleNameHandlingEnum? MiddleNameHandling = MiddleNameHandlingEnum.Separate, GenerationTitleHandlingEnum? GenerationTitleHandling = GenerationTitleHandlingEnum.Separate, string DefaultCountry = default(string))
        {
            // use default value if no "EnableCapitalization" provided
            if (EnableCapitalization == null)
            {
                this.EnableCapitalization = true;
            }
            else
            {
                this.EnableCapitalization = EnableCapitalization;
            }
            // use default value if no "EnableNicknames" provided
            if (EnableNicknames == null)
            {
                this.EnableNicknames = true;
            }
            else
            {
                this.EnableNicknames = EnableNicknames;
            }
            // use default value if no "MultiEntityHandling" provided
            if (MultiEntityHandling == null)
            {
                this.MultiEntityHandling = MultiEntityHandlingEnum.Single;
            }
            else
            {
                this.MultiEntityHandling = MultiEntityHandling;
            }
            // use default value if no "MiddleNameHandling" provided
            if (MiddleNameHandling == null)
            {
                this.MiddleNameHandling = MiddleNameHandlingEnum.Separate;
            }
            else
            {
                this.MiddleNameHandling = MiddleNameHandling;
            }
            // use default value if no "GenerationTitleHandling" provided
            if (GenerationTitleHandling == null)
            {
                this.GenerationTitleHandling = GenerationTitleHandlingEnum.Separate;
            }
            else
            {
                this.GenerationTitleHandling = GenerationTitleHandling;
            }
            this.DefaultCountry = DefaultCountry;
        }
        
        /// <summary>
        /// Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens. 
        /// </summary>
        /// <value>Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens. </value>
        [DataMember(Name="enable_capitalization", EmitDefaultValue=false)]
        public bool? EnableCapitalization { get; set; }

        /// <summary>
        /// Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name. 
        /// </summary>
        /// <value>Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name. </value>
        [DataMember(Name="enable_nicknames", EmitDefaultValue=false)]
        public bool? EnableNicknames { get; set; }




        /// <summary>
        /// The default &#x60;country&#x60; value to apply to names where no country is supplied. The ISO 3166 2-letter country code is preferred. 
        /// </summary>
        /// <value>The default &#x60;country&#x60; value to apply to names where no country is supplied. The ISO 3166 2-letter country code is preferred. </value>
        [DataMember(Name="default_country", EmitDefaultValue=false)]
        public string DefaultCountry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParseRequestConfiguration {\n");
            sb.Append("  EnableCapitalization: ").Append(EnableCapitalization).Append("\n");
            sb.Append("  EnableNicknames: ").Append(EnableNicknames).Append("\n");
            sb.Append("  MultiEntityHandling: ").Append(MultiEntityHandling).Append("\n");
            sb.Append("  MiddleNameHandling: ").Append(MiddleNameHandling).Append("\n");
            sb.Append("  GenerationTitleHandling: ").Append(GenerationTitleHandling).Append("\n");
            sb.Append("  DefaultCountry: ").Append(DefaultCountry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParseRequestConfiguration);
        }

        /// <summary>
        /// Returns true if ParseRequestConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ParseRequestConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParseRequestConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableCapitalization == input.EnableCapitalization ||
                    (this.EnableCapitalization != null &&
                    this.EnableCapitalization.Equals(input.EnableCapitalization))
                ) && 
                (
                    this.EnableNicknames == input.EnableNicknames ||
                    (this.EnableNicknames != null &&
                    this.EnableNicknames.Equals(input.EnableNicknames))
                ) && 
                (
                    this.MultiEntityHandling == input.MultiEntityHandling ||
                    (this.MultiEntityHandling != null &&
                    this.MultiEntityHandling.Equals(input.MultiEntityHandling))
                ) && 
                (
                    this.MiddleNameHandling == input.MiddleNameHandling ||
                    (this.MiddleNameHandling != null &&
                    this.MiddleNameHandling.Equals(input.MiddleNameHandling))
                ) && 
                (
                    this.GenerationTitleHandling == input.GenerationTitleHandling ||
                    (this.GenerationTitleHandling != null &&
                    this.GenerationTitleHandling.Equals(input.GenerationTitleHandling))
                ) && 
                (
                    this.DefaultCountry == input.DefaultCountry ||
                    (this.DefaultCountry != null &&
                    this.DefaultCountry.Equals(input.DefaultCountry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableCapitalization != null)
                    hashCode = hashCode * 59 + this.EnableCapitalization.GetHashCode();
                if (this.EnableNicknames != null)
                    hashCode = hashCode * 59 + this.EnableNicknames.GetHashCode();
                if (this.MultiEntityHandling != null)
                    hashCode = hashCode * 59 + this.MultiEntityHandling.GetHashCode();
                if (this.MiddleNameHandling != null)
                    hashCode = hashCode * 59 + this.MiddleNameHandling.GetHashCode();
                if (this.GenerationTitleHandling != null)
                    hashCode = hashCode * 59 + this.GenerationTitleHandling.GetHashCode();
                if (this.DefaultCountry != null)
                    hashCode = hashCode * 59 + this.DefaultCountry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
