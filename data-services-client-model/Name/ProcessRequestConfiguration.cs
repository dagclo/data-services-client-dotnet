/* 
 * Name validation
 *
 * The Name Validation data service parses fields, structured and unstructured,  pertaining to names in your records to offer updates, standardization, and  enrichment of name data. For example, it can provide you with information	to help you analyze and standardize customer contact data. The service is a tool to validate and parse name information and structure name parts.  It can indicate that a part of a name is missing, and assign parts of an input string.  In addition, the service can help indicate that the name belongs to a person,  with given name, middle name, and family name fields, or belongs to an organization.	You can refine the results by using the country code to map the output more closely  to that country's name usage patterns. ## Key functionality: * Formats and capitalizes name parts. Indicates how you wnat to handle different name parts. * Identifies the gender of a person based on the name. * Identifies missing name parts. * Indicates whether a particular name is typically a nickname and suggest other possible nicknames.
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Name
{
	/// <summary>
	/// ProcessRequestConfiguration
	/// </summary>
	[DataContract]
	public partial class ProcessRequestConfiguration : IEquatable<ProcessRequestConfiguration>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ProcessRequestConfiguration" /> class.
		/// </summary>
		/// <param name="EnableCapitalization">Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens.	(default to true).</param>
		/// <param name="EnableNicknames">Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name.  (default to true).</param>
		/// <param name="EnableDistinctiveTerms">Indicates whether or not to enable the identification of \&quot;distinctive terms\&quot; (usually words) in organization names or job titles. These terms are provided for situations where the entity name may contain a set of generic terms as well as terms that are more distinctive. Separating out the distinctive terms may make it easier to compare names since they have less generic \&quot;noise\&quot;.	(default to false).</param>
		public ProcessRequestConfiguration(bool? EnableCapitalization = true, bool? EnableNicknames = true, bool? EnableDistinctiveTerms = false)
		{
			// use default value if no "EnableCapitalization" provided
			if (EnableCapitalization == null)
			{
				this.EnableCapitalization = true;
			}
			else
			{
				this.EnableCapitalization = EnableCapitalization;
			}
			// use default value if no "EnableNicknames" provided
			if (EnableNicknames == null)
			{
				this.EnableNicknames = true;
			}
			else
			{
				this.EnableNicknames = EnableNicknames;
			}
			// use default value if no "EnableDistinctiveTerms" provided
			if (EnableDistinctiveTerms == null)
			{
				this.EnableDistinctiveTerms = false;
			}
			else
			{
				this.EnableDistinctiveTerms = EnableDistinctiveTerms;
			}
		}
		
		/// <summary>
		/// Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens. 
		/// </summary>
		/// <value>Indicates whether to enable capitalization support, meaning that the service will correct the text case of name tokens. </value>
		[DataMember(Name="enable_capitalization", EmitDefaultValue=false)]
		public bool? EnableCapitalization { get; set; }

		/// <summary>
		/// Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name. 
		/// </summary>
		/// <value>Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the nickname knowledge data for each name. </value>
		[DataMember(Name="enable_nicknames", EmitDefaultValue=false)]
		public bool? EnableNicknames { get; set; }

		/// <summary>
		/// Indicates whether or not to enable the identification of \&quot;distinctive terms\&quot; (usually words) in organization names or job titles. These terms are provided for situations where the entity name may contain a set of generic terms as well as terms that are more distinctive. Separating out the distinctive terms may make it easier to compare names since they have less generic \&quot;noise\&quot;. 
		/// </summary>
		/// <value>Indicates whether or not to enable the identification of \&quot;distinctive terms\&quot; (usually words) in organization names or job titles. These terms are provided for situations where the entity name may contain a set of generic terms as well as terms that are more distinctive. Separating out the distinctive terms may make it easier to compare names since they have less generic \&quot;noise\&quot;. </value>
		[DataMember(Name="enable_distinctive_terms", EmitDefaultValue=false)]
		public bool? EnableDistinctiveTerms { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class ProcessRequestConfiguration {\n");
			sb.Append("  EnableCapitalization: ").Append(EnableCapitalization).Append("\n");
			sb.Append("  EnableNicknames: ").Append(EnableNicknames).Append("\n");
			sb.Append("  EnableDistinctiveTerms: ").Append(EnableDistinctiveTerms).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as ProcessRequestConfiguration);
		}

		/// <summary>
		/// Returns true if ProcessRequestConfiguration instances are equal
		/// </summary>
		/// <param name="input">Instance of ProcessRequestConfiguration to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(ProcessRequestConfiguration input)
		{
			if (input == null)
				return false;

			return 
				(
					this.EnableCapitalization == input.EnableCapitalization ||
					(this.EnableCapitalization != null &&
					this.EnableCapitalization.Equals(input.EnableCapitalization))
				) && 
				(
					this.EnableNicknames == input.EnableNicknames ||
					(this.EnableNicknames != null &&
					this.EnableNicknames.Equals(input.EnableNicknames))
				) && 
				(
					this.EnableDistinctiveTerms == input.EnableDistinctiveTerms ||
					(this.EnableDistinctiveTerms != null &&
					this.EnableDistinctiveTerms.Equals(input.EnableDistinctiveTerms))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.EnableCapitalization != null)
					hashCode = hashCode * 59 + this.EnableCapitalization.GetHashCode();
				if (this.EnableNicknames != null)
					hashCode = hashCode * 59 + this.EnableNicknames.GetHashCode();
				if (this.EnableDistinctiveTerms != null)
					hashCode = hashCode * 59 + this.EnableDistinctiveTerms.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
