/* 
 * Phone Validation
 *
 * The Phone Validation data service parses, standardizes, and reformats phone numbers.  The service validates that a phone number is valid when considered against a set of  rules, including range of numbers in use, and formats. In addition, the service indicates what type of line the phone number is attached to, for example, fixed (land) line. ## Key functionality: * Parses and formats phone numbers in accordance with international and national standards. * Identifies the type of phone number, for example, Mobile, VoIP, Toll free, and so forth. * Provides easy-to-understand correction status, codes, and messages.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Quadient.DataServices.Model.Phone
{
    /// <summary>
    /// PhoneValidationResponseRecordPhoneNumber
    /// </summary>
    [DataContract]
    public partial class PhoneValidationResponseRecordPhoneNumber :  IEquatable<PhoneValidationResponseRecordPhoneNumber>, IValidatableObject
    {
        /// <summary>
        /// The type of phone number.
        /// </summary>
        /// <value>The type of phone number.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhoneTypeEnum
        {
            
            /// <summary>
            /// Enum Fixedline for value: Fixed line
            /// </summary>
            [EnumMember(Value = "Fixed line")]
            Fixedline = 1,
            
            /// <summary>
            /// Enum Fixedlineormobile for value: Fixed line or mobile
            /// </summary>
            [EnumMember(Value = "Fixed line or mobile")]
            Fixedlineormobile = 2,
            
            /// <summary>
            /// Enum Mobile for value: Mobile
            /// </summary>
            [EnumMember(Value = "Mobile")]
            Mobile = 3,
            
            /// <summary>
            /// Enum Pager for value: Pager
            /// </summary>
            [EnumMember(Value = "Pager")]
            Pager = 4,
            
            /// <summary>
            /// Enum Personalnumber for value: Personal number
            /// </summary>
            [EnumMember(Value = "Personal number")]
            Personalnumber = 5,
            
            /// <summary>
            /// Enum Premiumrate for value: Premium rate
            /// </summary>
            [EnumMember(Value = "Premium rate")]
            Premiumrate = 6,
            
            /// <summary>
            /// Enum Sharedcost for value: Shared cost
            /// </summary>
            [EnumMember(Value = "Shared cost")]
            Sharedcost = 7,
            
            /// <summary>
            /// Enum Tollfree for value: Toll free
            /// </summary>
            [EnumMember(Value = "Toll free")]
            Tollfree = 8,
            
            /// <summary>
            /// Enum UAN for value: UAN
            /// </summary>
            [EnumMember(Value = "UAN")]
            UAN = 9,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 10,
            
            /// <summary>
            /// Enum Voicemail for value: Voicemail
            /// </summary>
            [EnumMember(Value = "Voicemail")]
            Voicemail = 11,
            
            /// <summary>
            /// Enum VoIP for value: VoIP
            /// </summary>
            [EnumMember(Value = "VoIP")]
            VoIP = 12
        }

        /// <summary>
        /// The type of phone number.
        /// </summary>
        /// <value>The type of phone number.</value>
        [DataMember(Name="phone_type", EmitDefaultValue=false)]
        public PhoneTypeEnum? PhoneType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneValidationResponseRecordPhoneNumber" /> class.
        /// </summary>
        /// <param name="Id">User-specified reference id or name as passed in..</param>
        /// <param name="PhoneNumber">The processed phone number. If the phone number is recognized as valid, then the returned value is the same as presented by the &#x60;E164&#x60; format. If the phone number is not recognized, the service attempts to make individual &#x60;phone_number&#x60; values as comparable as possible, by applying the basic logic of the &#x60;E164&#x60; format, that is, trimming of white spaces, dashes, dots, and so forth.  The logic behind this is that even in cases where the service is unable to validate the phone number, the resulting string may be more useful in further data quality analysis. For example, the string will have a higher degree of similarity to other phone numbers to which it may be compared. .</param>
        /// <param name="Formats">Formats.</param>
        /// <param name="PhoneType">The type of phone number..</param>
        /// <param name="PhoneParts">PhoneParts.</param>
        public PhoneValidationResponseRecordPhoneNumber(string Id = default(string), string PhoneNumber = default(string), PhoneValidationResponseRecordPhoneNumberFormats Formats = default(PhoneValidationResponseRecordPhoneNumberFormats), PhoneTypeEnum? PhoneType = default(PhoneTypeEnum?), PhoneValidationResponseRecordPhoneNumberPhoneParts PhoneParts = default(PhoneValidationResponseRecordPhoneNumberPhoneParts))
        {
            this.Id = Id;
            this.PhoneNumber = PhoneNumber;
            this.Formats = Formats;
            this.PhoneType = PhoneType;
            this.PhoneParts = PhoneParts;
        }
        
        /// <summary>
        /// User-specified reference id or name as passed in.
        /// </summary>
        /// <value>User-specified reference id or name as passed in.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The processed phone number. If the phone number is recognized as valid, then the returned value is the same as presented by the &#x60;E164&#x60; format. If the phone number is not recognized, the service attempts to make individual &#x60;phone_number&#x60; values as comparable as possible, by applying the basic logic of the &#x60;E164&#x60; format, that is, trimming of white spaces, dashes, dots, and so forth.  The logic behind this is that even in cases where the service is unable to validate the phone number, the resulting string may be more useful in further data quality analysis. For example, the string will have a higher degree of similarity to other phone numbers to which it may be compared. 
        /// </summary>
        /// <value>The processed phone number. If the phone number is recognized as valid, then the returned value is the same as presented by the &#x60;E164&#x60; format. If the phone number is not recognized, the service attempts to make individual &#x60;phone_number&#x60; values as comparable as possible, by applying the basic logic of the &#x60;E164&#x60; format, that is, trimming of white spaces, dashes, dots, and so forth.  The logic behind this is that even in cases where the service is unable to validate the phone number, the resulting string may be more useful in further data quality analysis. For example, the string will have a higher degree of similarity to other phone numbers to which it may be compared. </value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Formats
        /// </summary>
        [DataMember(Name="formats", EmitDefaultValue=false)]
        public PhoneValidationResponseRecordPhoneNumberFormats Formats { get; set; }


        /// <summary>
        /// Gets or Sets PhoneParts
        /// </summary>
        [DataMember(Name="phone_parts", EmitDefaultValue=false)]
        public PhoneValidationResponseRecordPhoneNumberPhoneParts PhoneParts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneValidationResponseRecordPhoneNumber {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Formats: ").Append(Formats).Append("\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("  PhoneParts: ").Append(PhoneParts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoneValidationResponseRecordPhoneNumber);
        }

        /// <summary>
        /// Returns true if PhoneValidationResponseRecordPhoneNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoneValidationResponseRecordPhoneNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneValidationResponseRecordPhoneNumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Formats == input.Formats ||
                    (this.Formats != null &&
                    this.Formats.Equals(input.Formats))
                ) && 
                (
                    this.PhoneType == input.PhoneType ||
                    (this.PhoneType != null &&
                    this.PhoneType.Equals(input.PhoneType))
                ) && 
                (
                    this.PhoneParts == input.PhoneParts ||
                    (this.PhoneParts != null &&
                    this.PhoneParts.Equals(input.PhoneParts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Formats != null)
                    hashCode = hashCode * 59 + this.Formats.GetHashCode();
                if (this.PhoneType != null)
                    hashCode = hashCode * 59 + this.PhoneType.GetHashCode();
                if (this.PhoneParts != null)
                    hashCode = hashCode * 59 + this.PhoneParts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
