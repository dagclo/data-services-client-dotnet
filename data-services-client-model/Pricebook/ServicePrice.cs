/* 
 * Pricebook Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model
{
    /// <summary>
    /// ServicePrice
    /// </summary>
    [DataContract]
    public partial class ServicePrice :  IEquatable<ServicePrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePrice" /> class.
        /// </summary>
        /// <param name="ServiceName">ServiceName.</param>
        /// <param name="Currency">The currency that prices will be calculated in..</param>
        /// <param name="Tiers">The full map of tier prices matched against a service_use object to generate the final price. The name of the individual tier can be passed as a peer to count for more accurate estimations. The final price per tier is calculated as *price_per_unit \\* ceiling(matched / records_per_unit)*.</param>
        public ServicePrice(string ServiceName = default(string), string Currency = default(string), Dictionary<string, ServicePriceTiers> Tiers = default(Dictionary<string, ServicePriceTiers>))
        {
            this.ServiceName = ServiceName;
            this.Currency = Currency;
            this.Tiers = Tiers;
        }
        
        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name="service_name", EmitDefaultValue=false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// The currency that prices will be calculated in.
        /// </summary>
        /// <value>The currency that prices will be calculated in.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// The full map of tier prices matched against a service_use object to generate the final price. The name of the individual tier can be passed as a peer to count for more accurate estimations. The final price per tier is calculated as *price_per_unit \\* ceiling(matched / records_per_unit)*
        /// </summary>
        /// <value>The full map of tier prices matched against a service_use object to generate the final price. The name of the individual tier can be passed as a peer to count for more accurate estimations. The final price per tier is calculated as *price_per_unit \\* ceiling(matched / records_per_unit)*</value>
        [DataMember(Name="tiers", EmitDefaultValue=false)]
        public Dictionary<string, ServicePriceTiers> Tiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServicePrice {\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Tiers: ").Append(Tiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServicePrice);
        }

        /// <summary>
        /// Returns true if ServicePrice instances are equal
        /// </summary>
        /// <param name="input">Instance of ServicePrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServicePrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Tiers == input.Tiers ||
                    this.Tiers != null &&
                    this.Tiers.SequenceEqual(input.Tiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Tiers != null)
                    hashCode = hashCode * 59 + this.Tiers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
