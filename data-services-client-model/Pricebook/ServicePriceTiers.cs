/* 
 * Pricebook Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model
{
    /// <summary>
    /// ServicePriceTiers
    /// </summary>
    [DataContract]
    public partial class ServicePriceTiers :  IEquatable<ServicePriceTiers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePriceTiers" /> class.
        /// </summary>
        /// <param name="PricePerUnit">The price applied, in whole, to each unit of matched records..</param>
        /// <param name="FloorPricePerUnit">The minimum price that must be applied to each unit of matched records..</param>
        /// <param name="RecordsPerUnit">The number of records used to generate the count of units (rounded up) to which the price_per_unit is applied..</param>
        /// <param name="IncludedInEstimates">Indicates that this tier is used in the generation of estimates. Even when this is false, if the tier is included in the estimate request, the tier will be used for estimates..</param>
        /// <param name="OverrideRemaining">When an estimate request includes tier specifications, this indicates that the remainder of *count - specifiedTiersTotal* should be used. This will be true in cases where the tiers are expected to be mutually exclusive..</param>
        /// <param name="PercentDiscount">A % discount applied to the effective base price..</param>
        public ServicePriceTiers(decimal? PricePerUnit = default(decimal?), decimal? FloorPricePerUnit = default(decimal?), decimal? RecordsPerUnit = default(decimal?), bool? IncludedInEstimates = default(bool?), bool? OverrideRemaining = default(bool?), decimal? PercentDiscount = default(decimal?))
        {
            this.PricePerUnit = PricePerUnit;
            this.FloorPricePerUnit = FloorPricePerUnit;
            this.RecordsPerUnit = RecordsPerUnit;
            this.IncludedInEstimates = IncludedInEstimates;
            this.OverrideRemaining = OverrideRemaining;
            this.PercentDiscount = PercentDiscount;
        }
        
        /// <summary>
        /// The price applied, in whole, to each unit of matched records.
        /// </summary>
        /// <value>The price applied, in whole, to each unit of matched records.</value>
        [DataMember(Name="price_per_unit", EmitDefaultValue=false)]
        public decimal? PricePerUnit { get; set; }

        /// <summary>
        /// The minimum price that must be applied to each unit of matched records.
        /// </summary>
        /// <value>The minimum price that must be applied to each unit of matched records.</value>
        [DataMember(Name="floor_price_per_unit", EmitDefaultValue=false)]
        public decimal? FloorPricePerUnit { get; set; }

        /// <summary>
        /// The number of records used to generate the count of units (rounded up) to which the price_per_unit is applied.
        /// </summary>
        /// <value>The number of records used to generate the count of units (rounded up) to which the price_per_unit is applied.</value>
        [DataMember(Name="records_per_unit", EmitDefaultValue=false)]
        public decimal? RecordsPerUnit { get; set; }

        /// <summary>
        /// Indicates that this tier is used in the generation of estimates. Even when this is false, if the tier is included in the estimate request, the tier will be used for estimates.
        /// </summary>
        /// <value>Indicates that this tier is used in the generation of estimates. Even when this is false, if the tier is included in the estimate request, the tier will be used for estimates.</value>
        [DataMember(Name="included_in_estimates", EmitDefaultValue=false)]
        public bool? IncludedInEstimates { get; set; }

        /// <summary>
        /// When an estimate request includes tier specifications, this indicates that the remainder of *count - specifiedTiersTotal* should be used. This will be true in cases where the tiers are expected to be mutually exclusive.
        /// </summary>
        /// <value>When an estimate request includes tier specifications, this indicates that the remainder of *count - specifiedTiersTotal* should be used. This will be true in cases where the tiers are expected to be mutually exclusive.</value>
        [DataMember(Name="override_remaining", EmitDefaultValue=false)]
        public bool? OverrideRemaining { get; set; }

        /// <summary>
        /// A % discount applied to the effective base price.
        /// </summary>
        /// <value>A % discount applied to the effective base price.</value>
        [DataMember(Name="percent_discount", EmitDefaultValue=false)]
        public decimal? PercentDiscount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServicePriceTiers {\n");
            sb.Append("  PricePerUnit: ").Append(PricePerUnit).Append("\n");
            sb.Append("  FloorPricePerUnit: ").Append(FloorPricePerUnit).Append("\n");
            sb.Append("  RecordsPerUnit: ").Append(RecordsPerUnit).Append("\n");
            sb.Append("  IncludedInEstimates: ").Append(IncludedInEstimates).Append("\n");
            sb.Append("  OverrideRemaining: ").Append(OverrideRemaining).Append("\n");
            sb.Append("  PercentDiscount: ").Append(PercentDiscount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServicePriceTiers);
        }

        /// <summary>
        /// Returns true if ServicePriceTiers instances are equal
        /// </summary>
        /// <param name="input">Instance of ServicePriceTiers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServicePriceTiers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PricePerUnit == input.PricePerUnit ||
                    (this.PricePerUnit != null &&
                    this.PricePerUnit.Equals(input.PricePerUnit))
                ) && 
                (
                    this.FloorPricePerUnit == input.FloorPricePerUnit ||
                    (this.FloorPricePerUnit != null &&
                    this.FloorPricePerUnit.Equals(input.FloorPricePerUnit))
                ) && 
                (
                    this.RecordsPerUnit == input.RecordsPerUnit ||
                    (this.RecordsPerUnit != null &&
                    this.RecordsPerUnit.Equals(input.RecordsPerUnit))
                ) && 
                (
                    this.IncludedInEstimates == input.IncludedInEstimates ||
                    (this.IncludedInEstimates != null &&
                    this.IncludedInEstimates.Equals(input.IncludedInEstimates))
                ) && 
                (
                    this.OverrideRemaining == input.OverrideRemaining ||
                    (this.OverrideRemaining != null &&
                    this.OverrideRemaining.Equals(input.OverrideRemaining))
                ) && 
                (
                    this.PercentDiscount == input.PercentDiscount ||
                    (this.PercentDiscount != null &&
                    this.PercentDiscount.Equals(input.PercentDiscount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PricePerUnit != null)
                    hashCode = hashCode * 59 + this.PricePerUnit.GetHashCode();
                if (this.FloorPricePerUnit != null)
                    hashCode = hashCode * 59 + this.FloorPricePerUnit.GetHashCode();
                if (this.RecordsPerUnit != null)
                    hashCode = hashCode * 59 + this.RecordsPerUnit.GetHashCode();
                if (this.IncludedInEstimates != null)
                    hashCode = hashCode * 59 + this.IncludedInEstimates.GetHashCode();
                if (this.OverrideRemaining != null)
                    hashCode = hashCode * 59 + this.OverrideRemaining.GetHashCode();
                if (this.PercentDiscount != null)
                    hashCode = hashCode * 59 + this.PercentDiscount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
