/* 
 * Sentiment Analysis
 *
 * The Sentiment Analysis service offers insight into what customers are saying and feeling about your brand or product. Taking advantage of machine learning, the service can help you monitor customer perception and help influence the direction of your marketing and customer experience operations.  The service can analyze data from a variety of data sources, including Twitter and text contained in .csv files, say from customer support survey responses, and presents multiple visualizations of the results. You can review trends over time, easily learn what's hot and what's not based on the content of your data, and if you tap into the data in your Twitter feed, get a list of the topics that are the hottest and the messages that are the most intense.  Key functionality: * Steps you through setup with an easy to understand wizard. * Tracks sentiment per day/hour per topic. * Captures the most intense messages in periods ranging from seven to 30 days. * Provides sentiment visualizations that capture what topics your customers are discussing. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.SentimentAnalysis
{
    /// <summary>
    /// Project detail model.
    /// </summary>
    [DataContract]
    public partial class ProjectDetailResponse : IEquatable<ProjectDetailResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDetailResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectDetailResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDetailResponse" /> class.
        /// </summary>
        /// <param name="Id">Unique identifier for the project resource. (required).</param>
        /// <param name="Name">Descriptive name of the project..</param>
        /// <param name="Description">Long form of description of the project..</param>
        /// <param name="Status">Status (required).</param>
        /// <param name="CreatedDate">Date and time the the project was created. (required).</param>
        /// <param name="Topics">Collection of topic details. (required).</param>
        /// <param name="Sources">Collection of source details. (required).</param>
        public ProjectDetailResponse(string Id = default(string), string Name = default(string), string Description = default(string), ProjectStatus Status = default(ProjectStatus), DateTime? CreatedDate = default(DateTime?), List<TopicDetailResponse> Topics = default(List<TopicDetailResponse>), List<SourceDetailResponse> Sources = default(List<SourceDetailResponse>))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ProjectDetailResponse and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for ProjectDetailResponse and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "CreatedDate" is required (not null)
            if (CreatedDate == null)
            {
                throw new InvalidDataException("CreatedDate is a required property for ProjectDetailResponse and cannot be null");
            }
            else
            {
                this.CreatedDate = CreatedDate;
            }
            // to ensure "Topics" is required (not null)
            if (Topics == null)
            {
                throw new InvalidDataException("Topics is a required property for ProjectDetailResponse and cannot be null");
            }
            else
            {
                this.Topics = Topics;
            }
            // to ensure "Sources" is required (not null)
            if (Sources == null)
            {
                throw new InvalidDataException("Sources is a required property for ProjectDetailResponse and cannot be null");
            }
            else
            {
                this.Sources = Sources;
            }
            this.Name = Name;
            this.Description = Description;
        }
        
        /// <summary>
        /// Unique identifier for the project resource.
        /// </summary>
        /// <value>Unique identifier for the project resource.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Descriptive name of the project.
        /// </summary>
        /// <value>Descriptive name of the project.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Long form of description of the project.
        /// </summary>
        /// <value>Long form of description of the project.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ProjectStatus Status { get; set; }

        /// <summary>
        /// Date and time the the project was created.
        /// </summary>
        /// <value>Date and time the the project was created.</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Collection of topic details.
        /// </summary>
        /// <value>Collection of topic details.</value>
        [DataMember(Name="topics", EmitDefaultValue=false)]
        public List<TopicDetailResponse> Topics { get; set; }

        /// <summary>
        /// Collection of source details.
        /// </summary>
        /// <value>Collection of source details.</value>
        [DataMember(Name="sources", EmitDefaultValue=false)]
        public List<SourceDetailResponse> Sources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectDetailResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectDetailResponse);
        }

        /// <summary>
        /// Returns true if ProjectDetailResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectDetailResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectDetailResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Topics == input.Topics ||
                    this.Topics != null &&
                    this.Topics.SequenceEqual(input.Topics)
                ) && 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Topics != null)
                    hashCode = hashCode * 59 + this.Topics.GetHashCode();
                if (this.Sources != null)
                    hashCode = hashCode * 59 + this.Sources.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
