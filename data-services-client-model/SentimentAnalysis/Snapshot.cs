/* 
 * Sentiment Analysis
 *
 * The Sentiment Analysis service offers insight into what customers are saying and feeling about your brand or product. Taking advantage of machine learning, the service can help you monitor customer perception and help influence the direction of your marketing and customer experience operations.	The service can analyze data from a variety of data sources, including Twitter and text contained in .csv files, say from customer support survey responses, and presents multiple visualizations of the results. You can review trends over time, easily learn what's hot and what's not based on the content of your data, and if you tap into the data in your Twitter feed, get a list of the topics that are the hottest and the messages that are the most intense.  Key functionality: * Steps you through setup with an easy to understand wizard. * Tracks sentiment per day/hour per topic. * Captures the most intense messages in periods ranging from seven to 30 days. * Provides sentiment visualizations that capture what topics your customers are discussing. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.SentimentAnalysis
{
	/// <summary>
	/// The set of artifacts collected within a specified range of dates. Sentiment score information for artifacts is included.
	/// </summary>
	[DataContract]
	public partial class Snapshot : IEquatable<Snapshot>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Snapshot" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected Snapshot() { }
		/// <summary>
		/// Initializes a new instance of the <see cref="Snapshot" /> class.
		/// </summary>
		/// <param name="FromDate">The start date and time of the snapshot window. (required).</param>
		/// <param name="ToDate">The end date and time of the snapshot window. (required).</param>
		/// <param name="ArtifactCount">The total number of artifacts processed during the snapshot window. (required).</param>
		/// <param name="PositiveArtifactCount">The total number of artifacts with a positive sentiment score processed during the snapshot window. (required).</param>
		/// <param name="NeutralArtifactCount">The total number of artifacts with a neutral sentiment score processed during the snapshot window. (required).</param>
		/// <param name="NegativeArtifactCount">The total number of artifacts with a negative sentiment score processed during the snapshot window. (required).</param>
		/// <param name="AverageSentimentScore">The average score of all artifacts processed during the snapshot window. (required).</param>
		/// <param name="AveragePositiveSentimentScore">The average score of all artifacts with a positive sentiment processed during the snapshot window..</param>
		/// <param name="AverageNeutralSentimentScore">The average score of all artifacts with a neutral sentiment processed during the snapshot window..</param>
		/// <param name="AverageNegativeSentimentScore">The average score of all artifacts with a negative sentiment processed during the snapshot window..</param>
		public Snapshot(DateTime? FromDate = default(DateTime?), DateTime? ToDate = default(DateTime?), int? ArtifactCount = default(int?), int? PositiveArtifactCount = default(int?), int? NeutralArtifactCount = default(int?), int? NegativeArtifactCount = default(int?), int? AverageSentimentScore = default(int?), int? AveragePositiveSentimentScore = default(int?), int? AverageNeutralSentimentScore = default(int?), int? AverageNegativeSentimentScore = default(int?))
		{
			// to ensure "FromDate" is required (not null)
			if (FromDate == null)
			{
				throw new InvalidDataException("FromDate is a required property for Snapshot and cannot be null");
			}
			else
			{
				this.FromDate = FromDate;
			}
			// to ensure "ToDate" is required (not null)
			if (ToDate == null)
			{
				throw new InvalidDataException("ToDate is a required property for Snapshot and cannot be null");
			}
			else
			{
				this.ToDate = ToDate;
			}
			// to ensure "ArtifactCount" is required (not null)
			if (ArtifactCount == null)
			{
				throw new InvalidDataException("ArtifactCount is a required property for Snapshot and cannot be null");
			}
			else
			{
				this.ArtifactCount = ArtifactCount;
			}
			// to ensure "PositiveArtifactCount" is required (not null)
			if (PositiveArtifactCount == null)
			{
				throw new InvalidDataException("PositiveArtifactCount is a required property for Snapshot and cannot be null");
			}
			else
			{
				this.PositiveArtifactCount = PositiveArtifactCount;
			}
			// to ensure "NeutralArtifactCount" is required (not null)
			if (NeutralArtifactCount == null)
			{
				throw new InvalidDataException("NeutralArtifactCount is a required property for Snapshot and cannot be null");
			}
			else
			{
				this.NeutralArtifactCount = NeutralArtifactCount;
			}
			// to ensure "NegativeArtifactCount" is required (not null)
			if (NegativeArtifactCount == null)
			{
				throw new InvalidDataException("NegativeArtifactCount is a required property for Snapshot and cannot be null");
			}
			else
			{
				this.NegativeArtifactCount = NegativeArtifactCount;
			}
			// to ensure "AverageSentimentScore" is required (not null)
			if (AverageSentimentScore == null)
			{
				throw new InvalidDataException("AverageSentimentScore is a required property for Snapshot and cannot be null");
			}
			else
			{
				this.AverageSentimentScore = AverageSentimentScore;
			}
			this.AveragePositiveSentimentScore = AveragePositiveSentimentScore;
			this.AverageNeutralSentimentScore = AverageNeutralSentimentScore;
			this.AverageNegativeSentimentScore = AverageNegativeSentimentScore;
		}
		
		/// <summary>
		/// The start date and time of the snapshot window.
		/// </summary>
		/// <value>The start date and time of the snapshot window.</value>
		[DataMember(Name="from_date", EmitDefaultValue=false)]
		public DateTime? FromDate { get; set; }

		/// <summary>
		/// The end date and time of the snapshot window.
		/// </summary>
		/// <value>The end date and time of the snapshot window.</value>
		[DataMember(Name="to_date", EmitDefaultValue=false)]
		public DateTime? ToDate { get; set; }

		/// <summary>
		/// The total number of artifacts processed during the snapshot window.
		/// </summary>
		/// <value>The total number of artifacts processed during the snapshot window.</value>
		[DataMember(Name="artifact_count", EmitDefaultValue=false)]
		public int? ArtifactCount { get; set; }

		/// <summary>
		/// The total number of artifacts with a positive sentiment score processed during the snapshot window.
		/// </summary>
		/// <value>The total number of artifacts with a positive sentiment score processed during the snapshot window.</value>
		[DataMember(Name="positive_artifact_count", EmitDefaultValue=false)]
		public int? PositiveArtifactCount { get; set; }

		/// <summary>
		/// The total number of artifacts with a neutral sentiment score processed during the snapshot window.
		/// </summary>
		/// <value>The total number of artifacts with a neutral sentiment score processed during the snapshot window.</value>
		[DataMember(Name="neutral_artifact_count", EmitDefaultValue=false)]
		public int? NeutralArtifactCount { get; set; }

		/// <summary>
		/// The total number of artifacts with a negative sentiment score processed during the snapshot window.
		/// </summary>
		/// <value>The total number of artifacts with a negative sentiment score processed during the snapshot window.</value>
		[DataMember(Name="negative_artifact_count", EmitDefaultValue=false)]
		public int? NegativeArtifactCount { get; set; }

		/// <summary>
		/// The average score of all artifacts processed during the snapshot window.
		/// </summary>
		/// <value>The average score of all artifacts processed during the snapshot window.</value>
		[DataMember(Name="average_sentiment_score", EmitDefaultValue=false)]
		public int? AverageSentimentScore { get; set; }

		/// <summary>
		/// The average score of all artifacts with a positive sentiment processed during the snapshot window.
		/// </summary>
		/// <value>The average score of all artifacts with a positive sentiment processed during the snapshot window.</value>
		[DataMember(Name="average_positive_sentiment_score", EmitDefaultValue=false)]
		public int? AveragePositiveSentimentScore { get; set; }

		/// <summary>
		/// The average score of all artifacts with a neutral sentiment processed during the snapshot window.
		/// </summary>
		/// <value>The average score of all artifacts with a neutral sentiment processed during the snapshot window.</value>
		[DataMember(Name="average_neutral_sentiment_score", EmitDefaultValue=false)]
		public int? AverageNeutralSentimentScore { get; set; }

		/// <summary>
		/// The average score of all artifacts with a negative sentiment processed during the snapshot window.
		/// </summary>
		/// <value>The average score of all artifacts with a negative sentiment processed during the snapshot window.</value>
		[DataMember(Name="average_negative_sentiment_score", EmitDefaultValue=false)]
		public int? AverageNegativeSentimentScore { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Snapshot {\n");
			sb.Append("  FromDate: ").Append(FromDate).Append("\n");
			sb.Append("  ToDate: ").Append(ToDate).Append("\n");
			sb.Append("  ArtifactCount: ").Append(ArtifactCount).Append("\n");
			sb.Append("  PositiveArtifactCount: ").Append(PositiveArtifactCount).Append("\n");
			sb.Append("  NeutralArtifactCount: ").Append(NeutralArtifactCount).Append("\n");
			sb.Append("  NegativeArtifactCount: ").Append(NegativeArtifactCount).Append("\n");
			sb.Append("  AverageSentimentScore: ").Append(AverageSentimentScore).Append("\n");
			sb.Append("  AveragePositiveSentimentScore: ").Append(AveragePositiveSentimentScore).Append("\n");
			sb.Append("  AverageNeutralSentimentScore: ").Append(AverageNeutralSentimentScore).Append("\n");
			sb.Append("  AverageNegativeSentimentScore: ").Append(AverageNegativeSentimentScore).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as Snapshot);
		}

		/// <summary>
		/// Returns true if Snapshot instances are equal
		/// </summary>
		/// <param name="input">Instance of Snapshot to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Snapshot input)
		{
			if (input == null)
				return false;

			return 
				(
					this.FromDate == input.FromDate ||
					(this.FromDate != null &&
					this.FromDate.Equals(input.FromDate))
				) && 
				(
					this.ToDate == input.ToDate ||
					(this.ToDate != null &&
					this.ToDate.Equals(input.ToDate))
				) && 
				(
					this.ArtifactCount == input.ArtifactCount ||
					(this.ArtifactCount != null &&
					this.ArtifactCount.Equals(input.ArtifactCount))
				) && 
				(
					this.PositiveArtifactCount == input.PositiveArtifactCount ||
					(this.PositiveArtifactCount != null &&
					this.PositiveArtifactCount.Equals(input.PositiveArtifactCount))
				) && 
				(
					this.NeutralArtifactCount == input.NeutralArtifactCount ||
					(this.NeutralArtifactCount != null &&
					this.NeutralArtifactCount.Equals(input.NeutralArtifactCount))
				) && 
				(
					this.NegativeArtifactCount == input.NegativeArtifactCount ||
					(this.NegativeArtifactCount != null &&
					this.NegativeArtifactCount.Equals(input.NegativeArtifactCount))
				) && 
				(
					this.AverageSentimentScore == input.AverageSentimentScore ||
					(this.AverageSentimentScore != null &&
					this.AverageSentimentScore.Equals(input.AverageSentimentScore))
				) && 
				(
					this.AveragePositiveSentimentScore == input.AveragePositiveSentimentScore ||
					(this.AveragePositiveSentimentScore != null &&
					this.AveragePositiveSentimentScore.Equals(input.AveragePositiveSentimentScore))
				) && 
				(
					this.AverageNeutralSentimentScore == input.AverageNeutralSentimentScore ||
					(this.AverageNeutralSentimentScore != null &&
					this.AverageNeutralSentimentScore.Equals(input.AverageNeutralSentimentScore))
				) && 
				(
					this.AverageNegativeSentimentScore == input.AverageNegativeSentimentScore ||
					(this.AverageNegativeSentimentScore != null &&
					this.AverageNegativeSentimentScore.Equals(input.AverageNegativeSentimentScore))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.FromDate != null)
					hashCode = hashCode * 59 + this.FromDate.GetHashCode();
				if (this.ToDate != null)
					hashCode = hashCode * 59 + this.ToDate.GetHashCode();
				if (this.ArtifactCount != null)
					hashCode = hashCode * 59 + this.ArtifactCount.GetHashCode();
				if (this.PositiveArtifactCount != null)
					hashCode = hashCode * 59 + this.PositiveArtifactCount.GetHashCode();
				if (this.NeutralArtifactCount != null)
					hashCode = hashCode * 59 + this.NeutralArtifactCount.GetHashCode();
				if (this.NegativeArtifactCount != null)
					hashCode = hashCode * 59 + this.NegativeArtifactCount.GetHashCode();
				if (this.AverageSentimentScore != null)
					hashCode = hashCode * 59 + this.AverageSentimentScore.GetHashCode();
				if (this.AveragePositiveSentimentScore != null)
					hashCode = hashCode * 59 + this.AveragePositiveSentimentScore.GetHashCode();
				if (this.AverageNeutralSentimentScore != null)
					hashCode = hashCode * 59 + this.AverageNeutralSentimentScore.GetHashCode();
				if (this.AverageNegativeSentimentScore != null)
					hashCode = hashCode * 59 + this.AverageNegativeSentimentScore.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
