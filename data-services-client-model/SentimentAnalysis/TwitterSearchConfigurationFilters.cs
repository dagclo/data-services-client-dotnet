/* 
 * Sentiment Analysis
 *
 * The Sentiment Analysis service offers insight into what customers are saying and feeling about your brand or product. Taking advantage of machine learning, the service can help you monitor customer perception and help influence the direction of your marketing and customer experience operations.	The service can analyze data from a variety of data sources, including Twitter and text contained in .csv files, say from customer support survey responses, and presents multiple visualizations of the results. You can review trends over time, easily learn what's hot and what's not based on the content of your data, and if you tap into the data in your Twitter feed, get a list of the topics that are the hottest and the messages that are the most intense.  Key functionality: * Steps you through setup with an easy to understand wizard. * Tracks sentiment per day/hour per topic. * Captures the most intense messages in periods ranging from seven to 30 days. * Provides sentiment visualizations that capture what topics your customers are discussing. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.SentimentAnalysis
{
	/// <summary>
	/// Parameters to use for search.
	/// </summary>
	[DataContract]
	public partial class TwitterSearchConfigurationFilters : IEquatable<TwitterSearchConfigurationFilters>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="TwitterSearchConfigurationFilters" /> class.
		/// </summary>
		/// <param name="InclusionTerms">A set of terms that you want to use to filter the tweets that are collected in a search. Tweets that contain matches to any of the defined terms are used. If the set of terms is overly broad or too many terms are defined, some tweets may be skipped..</param>
		/// <param name="ExclusionTerms">A set of terms that you want to use restrict the set of tweets that are collected in a search. Tweets that contain matches to any of the defined terms are ignored..</param>
		/// <param name="Languages">Languages to filter the tweets that are collected. Tweets in any of the defined languages are used. The default is &#39;en&#39; (English) only..</param>
		/// <param name="ExcludeRetweets">Indicates that retweets are ignored. The default is to include retweets..</param>
		public TwitterSearchConfigurationFilters(List<string> InclusionTerms = default(List<string>), List<string> ExclusionTerms = default(List<string>), List<string> Languages = default(List<string>), bool? ExcludeRetweets = default(bool?))
		{
			this.InclusionTerms = InclusionTerms;
			this.ExclusionTerms = ExclusionTerms;
			this.Languages = Languages;
			this.ExcludeRetweets = ExcludeRetweets;
		}
		
		/// <summary>
		/// A set of terms that you want to use to filter the tweets that are collected in a search. Tweets that contain matches to any of the defined terms are used. If the set of terms is overly broad or too many terms are defined, some tweets may be skipped.
		/// </summary>
		/// <value>A set of terms that you want to use to filter the tweets that are collected in a search. Tweets that contain matches to any of the defined terms are used. If the set of terms is overly broad or too many terms are defined, some tweets may be skipped.</value>
		[DataMember(Name="inclusion_terms", EmitDefaultValue=false)]
		public List<string> InclusionTerms { get; set; }

		/// <summary>
		/// A set of terms that you want to use restrict the set of tweets that are collected in a search. Tweets that contain matches to any of the defined terms are ignored.
		/// </summary>
		/// <value>A set of terms that you want to use restrict the set of tweets that are collected in a search. Tweets that contain matches to any of the defined terms are ignored.</value>
		[DataMember(Name="exclusion_terms", EmitDefaultValue=false)]
		public List<string> ExclusionTerms { get; set; }

		/// <summary>
		/// Languages to filter the tweets that are collected. Tweets in any of the defined languages are used. The default is &#39;en&#39; (English) only.
		/// </summary>
		/// <value>Languages to filter the tweets that are collected. Tweets in any of the defined languages are used. The default is &#39;en&#39; (English) only.</value>
		[DataMember(Name="languages", EmitDefaultValue=false)]
		public List<string> Languages { get; set; }

		/// <summary>
		/// Indicates that retweets are ignored. The default is to include retweets.
		/// </summary>
		/// <value>Indicates that retweets are ignored. The default is to include retweets.</value>
		[DataMember(Name="exclude_retweets", EmitDefaultValue=false)]
		public bool? ExcludeRetweets { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class TwitterSearchConfigurationFilters {\n");
			sb.Append("  InclusionTerms: ").Append(InclusionTerms).Append("\n");
			sb.Append("  ExclusionTerms: ").Append(ExclusionTerms).Append("\n");
			sb.Append("  Languages: ").Append(Languages).Append("\n");
			sb.Append("  ExcludeRetweets: ").Append(ExcludeRetweets).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as TwitterSearchConfigurationFilters);
		}

		/// <summary>
		/// Returns true if TwitterSearchConfigurationFilters instances are equal
		/// </summary>
		/// <param name="input">Instance of TwitterSearchConfigurationFilters to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(TwitterSearchConfigurationFilters input)
		{
			if (input == null)
				return false;

			return 
				(
					this.InclusionTerms == input.InclusionTerms ||
					this.InclusionTerms != null &&
					this.InclusionTerms.SequenceEqual(input.InclusionTerms)
				) && 
				(
					this.ExclusionTerms == input.ExclusionTerms ||
					this.ExclusionTerms != null &&
					this.ExclusionTerms.SequenceEqual(input.ExclusionTerms)
				) && 
				(
					this.Languages == input.Languages ||
					this.Languages != null &&
					this.Languages.SequenceEqual(input.Languages)
				) && 
				(
					this.ExcludeRetweets == input.ExcludeRetweets ||
					(this.ExcludeRetweets != null &&
					this.ExcludeRetweets.Equals(input.ExcludeRetweets))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.InclusionTerms != null)
					hashCode = hashCode * 59 + this.InclusionTerms.GetHashCode();
				if (this.ExclusionTerms != null)
					hashCode = hashCode * 59 + this.ExclusionTerms.GetHashCode();
				if (this.Languages != null)
					hashCode = hashCode * 59 + this.Languages.GetHashCode();
				if (this.ExcludeRetweets != null)
					hashCode = hashCode * 59 + this.ExcludeRetweets.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
