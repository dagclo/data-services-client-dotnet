/* 
 * URL Validation
 *
 * The URL Validation service is used to confirm that a particular URL, or multiple URLs, is valid and safe to use. For example, if you are designing a communication for customers and want to include a URL, you can check that the URL goes to a valid, active website before sending the communication.   The service validates web page addresses that use the HTTP and HTTPS application protocols. It does not process web addresses that are in the IPv4 and IPv6 address format.	## Key functionality:	* Validates URLs to a level specified and configured by the user.  * Validates the existence of domains and conformity to patterns.  * Checks whether a web server is responsive when queried for the URL.	* Handles complexities, such as URL redirection.  * Adds missing URL pieces, such as scheme, and removes noise from the input.	* Provides codes to warn the user of authentication requirements, browser-specific URL length restrictions, and so forth. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Url
{
	/// <summary>
	/// OutcomeDefinition
	/// </summary>
	[DataContract]
	public partial class OutcomeDefinition : IEquatable<OutcomeDefinition>, IValidatableObject
	{
		/// <summary>
		/// The final status of the validation operation. 
		/// </summary>
		/// <value>The final status of the validation operation. </value>
		[JsonConverter(typeof(StringEnumConverter))]
		public enum CategoryEnum
		{
			
			/// <summary>
			/// Enum Valid for value: Valid
			/// </summary>
			[EnumMember(Value = "Valid")]
			Valid = 1,
			
			/// <summary>
			/// Enum Corrected for value: Corrected
			/// </summary>
			[EnumMember(Value = "Corrected")]
			Corrected = 2,
			
			/// <summary>
			/// Enum Doubtful for value: Doubtful
			/// </summary>
			[EnumMember(Value = "Doubtful")]
			Doubtful = 3,
			
			/// <summary>
			/// Enum Invalid for value: Invalid
			/// </summary>
			[EnumMember(Value = "Invalid")]
			Invalid = 4,
			
			/// <summary>
			/// Enum Skipped for value: Skipped
			/// </summary>
			[EnumMember(Value = "Skipped")]
			Skipped = 5
		}

		/// <summary>
		/// The final status of the validation operation. 
		/// </summary>
		/// <value>The final status of the validation operation. </value>
		[DataMember(Name="category", EmitDefaultValue=false)]
		public CategoryEnum Category { get; set; }
		/// <summary>
		/// Initializes a new instance of the <see cref="OutcomeDefinition" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected OutcomeDefinition() { }
		/// <summary>
		/// Initializes a new instance of the <see cref="OutcomeDefinition" /> class.
		/// </summary>
		/// <param name="Category">The final status of the validation operation.  (required).</param>
		/// <param name="Codes">An object that contains status codes as keys and details/messages as values. Codes prefixed with A are informational. Codes prefixed with C describe a correction. Codes prefixed with E describe an input error. These records are skipped or are invalid. The values may be either a string message or another object that contains additional information. More than one code may be returned. * &#x60;A1&#x60; - Validated. * &#x60;A2&#x60; - URL is long; not technically incorrect, but may fail with some web browsers. * &#x60;A3&#x60; - Valid domain (successfully resolved DNS). * &#x60;A4&#x60; - Web server responded at root path. * &#x60;A5&#x60; - HTTP HEAD success to URL. * &#x60;A6&#x60; - HTTP GET success to URL. * &#x60;C1&#x60; - URL is a redirect. Redirect successfully followed. * &#x60;C2&#x60; - Missing URL scheme. Default scheme successfully added. * &#x60;E1&#x60; - Blank URL. * &#x60;E2&#x60; - Invalid format. * &#x60;E3&#x60; - Invalid URL scheme. * &#x60;E4&#x60; - Invalid domain (cannot resolve DNS). * &#x60;E5&#x60; - URL is a redirect. Redirected URL failed validation. * &#x60;E6&#x60; - URL is a redirect. Cyclic redirection detected. * &#x60;E7&#x60; - URL includes an unrecognized hostname type. * &#x60;E8&#x60; - URL includes an IPv4 address. * &#x60;E9&#x60; - URL includes an IPv6 address. Not supported by many systems. * &#x60;E10&#x60; - Error connecting to the remote server. * &#x60;E11&#x60; - HTTP status error received. .</param>
		/// <param name="HttpStatusCode">The HTTP status code of the attempt to connect to URL, if any. .</param>
		public OutcomeDefinition(CategoryEnum Category = default(CategoryEnum), Dictionary<string, string> Codes = default(Dictionary<string, string>), int? HttpStatusCode = default(int?))
		{
			// to ensure "Category" is required (not null)
			if (Category == null)
			{
				throw new InvalidDataException("Category is a required property for OutcomeDefinition and cannot be null");
			}
			else
			{
				this.Category = Category;
			}
			this.Codes = Codes;
			this.HttpStatusCode = HttpStatusCode;
		}
		

		/// <summary>
		/// An object that contains status codes as keys and details/messages as values. Codes prefixed with A are informational. Codes prefixed with C describe a correction. Codes prefixed with E describe an input error. These records are skipped or are invalid. The values may be either a string message or another object that contains additional information. More than one code may be returned. * &#x60;A1&#x60; - Validated. * &#x60;A2&#x60; - URL is long; not technically incorrect, but may fail with some web browsers. * &#x60;A3&#x60; - Valid domain (successfully resolved DNS). * &#x60;A4&#x60; - Web server responded at root path. * &#x60;A5&#x60; - HTTP HEAD success to URL. * &#x60;A6&#x60; - HTTP GET success to URL. * &#x60;C1&#x60; - URL is a redirect. Redirect successfully followed. * &#x60;C2&#x60; - Missing URL scheme. Default scheme successfully added. * &#x60;E1&#x60; - Blank URL. * &#x60;E2&#x60; - Invalid format. * &#x60;E3&#x60; - Invalid URL scheme. * &#x60;E4&#x60; - Invalid domain (cannot resolve DNS). * &#x60;E5&#x60; - URL is a redirect. Redirected URL failed validation. * &#x60;E6&#x60; - URL is a redirect. Cyclic redirection detected. * &#x60;E7&#x60; - URL includes an unrecognized hostname type. * &#x60;E8&#x60; - URL includes an IPv4 address. * &#x60;E9&#x60; - URL includes an IPv6 address. Not supported by many systems. * &#x60;E10&#x60; - Error connecting to the remote server. * &#x60;E11&#x60; - HTTP status error received. 
		/// </summary>
		/// <value>An object that contains status codes as keys and details/messages as values. Codes prefixed with A are informational. Codes prefixed with C describe a correction. Codes prefixed with E describe an input error. These records are skipped or are invalid. The values may be either a string message or another object that contains additional information. More than one code may be returned. * &#x60;A1&#x60; - Validated. * &#x60;A2&#x60; - URL is long; not technically incorrect, but may fail with some web browsers. * &#x60;A3&#x60; - Valid domain (successfully resolved DNS). * &#x60;A4&#x60; - Web server responded at root path. * &#x60;A5&#x60; - HTTP HEAD success to URL. * &#x60;A6&#x60; - HTTP GET success to URL. * &#x60;C1&#x60; - URL is a redirect. Redirect successfully followed. * &#x60;C2&#x60; - Missing URL scheme. Default scheme successfully added. * &#x60;E1&#x60; - Blank URL. * &#x60;E2&#x60; - Invalid format. * &#x60;E3&#x60; - Invalid URL scheme. * &#x60;E4&#x60; - Invalid domain (cannot resolve DNS). * &#x60;E5&#x60; - URL is a redirect. Redirected URL failed validation. * &#x60;E6&#x60; - URL is a redirect. Cyclic redirection detected. * &#x60;E7&#x60; - URL includes an unrecognized hostname type. * &#x60;E8&#x60; - URL includes an IPv4 address. * &#x60;E9&#x60; - URL includes an IPv6 address. Not supported by many systems. * &#x60;E10&#x60; - Error connecting to the remote server. * &#x60;E11&#x60; - HTTP status error received. </value>
		[DataMember(Name="codes", EmitDefaultValue=false)]
		public Dictionary<string, string> Codes { get; set; }

		/// <summary>
		/// The HTTP status code of the attempt to connect to URL, if any. 
		/// </summary>
		/// <value>The HTTP status code of the attempt to connect to URL, if any. </value>
		[DataMember(Name="http_status_code", EmitDefaultValue=false)]
		public int? HttpStatusCode { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class OutcomeDefinition {\n");
			sb.Append("  Category: ").Append(Category).Append("\n");
			sb.Append("  Codes: ").Append(Codes).Append("\n");
			sb.Append("  HttpStatusCode: ").Append(HttpStatusCode).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as OutcomeDefinition);
		}

		/// <summary>
		/// Returns true if OutcomeDefinition instances are equal
		/// </summary>
		/// <param name="input">Instance of OutcomeDefinition to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(OutcomeDefinition input)
		{
			if (input == null)
				return false;

			return 
				(
					this.Category == input.Category ||
					(this.Category != null &&
					this.Category.Equals(input.Category))
				) && 
				(
					this.Codes == input.Codes ||
					this.Codes != null &&
					this.Codes.SequenceEqual(input.Codes)
				) && 
				(
					this.HttpStatusCode == input.HttpStatusCode ||
					(this.HttpStatusCode != null &&
					this.HttpStatusCode.Equals(input.HttpStatusCode))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.Category != null)
					hashCode = hashCode * 59 + this.Category.GetHashCode();
				if (this.Codes != null)
					hashCode = hashCode * 59 + this.Codes.GetHashCode();
				if (this.HttpStatusCode != null)
					hashCode = hashCode * 59 + this.HttpStatusCode.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
