/* 
 * URL Validation
 *
 * The URL Validation service is used to confirm that a particular URL, or multiple URLs, is valid and safe to use. For example, if you are designing a communication for customers and want to include a URL, you can check that the URL goes to a valid, active website before sending the communication.   The service validates web page addresses that use the HTTP and HTTPS application protocols. It does not process web addresses that are in the IPv4 and IPv6 address format.	## Key functionality:	* Validates URLs to a level specified and configured by the user.  * Validates the existence of domains and conformity to patterns.  * Checks whether a web server is responsive when queried for the URL.	* Handles complexities, such as URL redirection.  * Adds missing URL pieces, such as scheme, and removes noise from the input.	* Provides codes to warn the user of authentication requirements, browser-specific URL length restrictions, and so forth. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.Url
{
	/// <summary>
	/// UrlValidationRequestConfiguration
	/// </summary>
	[DataContract]
	public partial class UrlValidationRequestConfiguration : IEquatable<UrlValidationRequestConfiguration>, IValidatableObject
	{
		/// <summary>
		/// Defines the level of URL validation to apply. Specify a level to match the processing needs of your business workflow. 
		/// </summary>
		/// <value>Defines the level of URL validation to apply. Specify a level to match the processing needs of your business workflow. </value>
		[DataMember(Name="validation_depth", EmitDefaultValue=false)]
		public UrlValidationDepth? ValidationDepth { get; set; }
		/// <summary>
		/// Specifies the default protocol to be applied to input URL strings that do not include one.
		/// </summary>
		/// <value>Specifies the default protocol to be applied to input URL strings that do not include one.</value>
		[JsonConverter(typeof(StringEnumConverter))]
		public enum DefaultSchemeEnum
		{
			
			/// <summary>
			/// Enum Http for value: http
			/// </summary>
			[EnumMember(Value = "http")]
			Http = 1,
			
			/// <summary>
			/// Enum Https for value: https
			/// </summary>
			[EnumMember(Value = "https")]
			Https = 2
		}

		/// <summary>
		/// Specifies the default protocol to be applied to input URL strings that do not include one.
		/// </summary>
		/// <value>Specifies the default protocol to be applied to input URL strings that do not include one.</value>
		[DataMember(Name="default_scheme", EmitDefaultValue=false)]
		public DefaultSchemeEnum? DefaultScheme { get; set; }
		/// <summary>
		/// Initializes a new instance of the <see cref="UrlValidationRequestConfiguration" /> class.
		/// </summary>
		/// <param name="ValidationDepth">Defines the level of URL validation to apply. Specify a level to match the processing needs of your business workflow. .</param>
		/// <param name="DefaultScheme">Specifies the default protocol to be applied to input URL strings that do not include one. (default to DefaultSchemeEnum.Http).</param>
		public UrlValidationRequestConfiguration(UrlValidationDepth? ValidationDepth = default(UrlValidationDepth?), DefaultSchemeEnum? DefaultScheme = DefaultSchemeEnum.Http)
		{
			this.ValidationDepth = ValidationDepth;
			// use default value if no "DefaultScheme" provided
			if (DefaultScheme == null)
			{
				this.DefaultScheme = DefaultSchemeEnum.Http;
			}
			else
			{
				this.DefaultScheme = DefaultScheme;
			}
		}
		


		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class UrlValidationRequestConfiguration {\n");
			sb.Append("  ValidationDepth: ").Append(ValidationDepth).Append("\n");
			sb.Append("  DefaultScheme: ").Append(DefaultScheme).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as UrlValidationRequestConfiguration);
		}

		/// <summary>
		/// Returns true if UrlValidationRequestConfiguration instances are equal
		/// </summary>
		/// <param name="input">Instance of UrlValidationRequestConfiguration to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(UrlValidationRequestConfiguration input)
		{
			if (input == null)
				return false;

			return 
				(
					this.ValidationDepth == input.ValidationDepth ||
					(this.ValidationDepth != null &&
					this.ValidationDepth.Equals(input.ValidationDepth))
				) && 
				(
					this.DefaultScheme == input.DefaultScheme ||
					(this.DefaultScheme != null &&
					this.DefaultScheme.Equals(input.DefaultScheme))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.ValidationDepth != null)
					hashCode = hashCode * 59 + this.ValidationDepth.GetHashCode();
				if (this.DefaultScheme != null)
					hashCode = hashCode * 59 + this.DefaultScheme.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
