/* 
 * Walk Sequence
 *
 * The Walk Sequence service performs USPS® CASS™ processing and appends USPS Walk Sequence numbers to mail pieces. Mailings that target specific ZIP Codes or neighborhoods are good candidates for the Walk Sequence service.	A mailing that is sorted in Walk Sequence order may qualify for USPS High Density and Saturation mailing discounts. Adding Walk Sqeunce data to mailings can lower your postage costs.	## Job execution  The general flow to execute a batch job is to:  1. Create a job, specifying its configuration properties, and upload and download schema (input fields and output fields). You cannot change the job's configuration after creation.	2. Upload the records you want to process via one or more calls to the `/jobs/{job_id}/records` endpoint. Records are uploaded in blocks. The records are stored on the server for processing.	3. Initiate processing by calling the `/jobs/{job_id}/_run` endpoint. 4. Wait for the job status to be updated to `SUCCESS` or `FAILED`. 5. Download the records. 6. Delete the job when you are done by requesting a `DELETE` on the `/jobs/{job_id}` endpoint, which removes both the input and output records.  ## Records  The upload of records must be complete prior to running the service. Records are categorized as `input` or `output`. The schema (fields and order) of the records is defined via the job creation call.	## Pagination Records for a job are broken into pages (`page_id`) for retrieval. The collection of record page IDs is available via the `/jobs/{job_id}/records/pages` endpoint. Retrieve this collection as a precursor to downloading records. Each record page can then be retrieved by the client. Page IDs are immutable and can be retrieved in parallel. Record pages may also be retrieved multiple times if needed. 
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.UsBatch
{
	/// <summary>
	/// WalkSequenceConfiguration
	/// </summary>
	[DataContract]
	public partial class WalkSequenceConfiguration : IEquatable<WalkSequenceConfiguration>, IValidatableObject
	{
		/// <summary>
		/// Gets or Sets AddressElementFormat
		/// </summary>
		[DataMember(Name="address_element_format", EmitDefaultValue=false)]
		public AddressElementFormat? AddressElementFormat { get; set; }
		/// <summary>
		/// Gets or Sets AddressCasing
		/// </summary>
		[DataMember(Name="address_casing", EmitDefaultValue=false)]
		public Casing? AddressCasing { get; set; }
		/// <summary>
		/// Gets or Sets AddressLineFormatting
		/// </summary>
		[DataMember(Name="address_line_formatting", EmitDefaultValue=false)]
		public AddressLineFormatting? AddressLineFormatting { get; set; }
		/// <summary>
		/// Gets or Sets OrganizationPlacement
		/// </summary>
		[DataMember(Name="organization_placement", EmitDefaultValue=false)]
		public OrganizationPlacement? OrganizationPlacement { get; set; }
		/// <summary>
		/// Gets or Sets PmbPlacement
		/// </summary>
		[DataMember(Name="pmb_placement", EmitDefaultValue=false)]
		public PmbPlacement? PmbPlacement { get; set; }
		/// <summary>
		/// Gets or Sets PreferredAddressType
		/// </summary>
		[DataMember(Name="preferred_address_type", EmitDefaultValue=false)]
		public PreferredAddressType? PreferredAddressType { get; set; }
		/// <summary>
		/// Gets or Sets UnitPlacement
		/// </summary>
		[DataMember(Name="unit_placement", EmitDefaultValue=false)]
		public UnitPlacement? UnitPlacement { get; set; }
		/// <summary>
		/// Initializes a new instance of the <see cref="WalkSequenceConfiguration" /> class.
		/// </summary>
		/// <param name="AddressElementFormat">AddressElementFormat.</param>
		/// <param name="AddressCasing">AddressCasing.</param>
		/// <param name="AddressLineFormatting">AddressLineFormatting.</param>
		/// <param name="ApplyCasingToOrganization">Controls the casing behavior that is applied to address organization information. Defaults to true..</param>
		/// <param name="OrganizationPlacement">OrganizationPlacement.</param>
		/// <param name="KeepExtraInformation">Controls retention of information determined to be not part of the address. Defaults to true..</param>
		/// <param name="ListProcessorName">The processing entity&#39;s name to display on the CASS™ 3553 report..</param>
		/// <param name="MailersAddress">The address to display on the CASS™ 3553 report..</param>
		/// <param name="MailersCity">The city to display on the CASS™ 3553 report..</param>
		/// <param name="MailersListName">The list name to display on the CASS™ 3553 report..</param>
		/// <param name="MailersName">The mailer&#39;s name to display on the CASS™ 3553 report..</param>
		/// <param name="MailersState">The state to display on the CASS™ 3553 report..</param>
		/// <param name="MailersZipcode">The zipcode to display on the CASS™ 3553 report..</param>
		/// <param name="PmbPlacement">PmbPlacement.</param>
		/// <param name="PreferAbbreviatedAddresses">When true, the abbreviated version of cities and street names if available. Note that not every city and street has an abbreviation. Defaults to false..</param>
		/// <param name="PreferredAddressType">PreferredAddressType.</param>
		/// <param name="RequireCassReport">Allows opting-out of CASS™ 3553 report generation. May improve processing speed. Defaults to false..</param>
		/// <param name="RequireDpvValidatedSecondary">Assign a +4 zip code only for those addresses with validated secondary information. When true. Defaults to false..</param>
		/// <param name="UnitPlacement">UnitPlacement.</param>
		public WalkSequenceConfiguration(AddressElementFormat? AddressElementFormat = default(AddressElementFormat?), Casing? AddressCasing = default(Casing?), AddressLineFormatting? AddressLineFormatting = default(AddressLineFormatting?), bool? ApplyCasingToOrganization = default(bool?), OrganizationPlacement? OrganizationPlacement = default(OrganizationPlacement?), bool? KeepExtraInformation = default(bool?), string ListProcessorName = default(string), string MailersAddress = default(string), string MailersCity = default(string), string MailersListName = default(string), string MailersName = default(string), string MailersState = default(string), string MailersZipcode = default(string), PmbPlacement? PmbPlacement = default(PmbPlacement?), bool? PreferAbbreviatedAddresses = default(bool?), PreferredAddressType? PreferredAddressType = default(PreferredAddressType?), bool? RequireCassReport = default(bool?), bool? RequireDpvValidatedSecondary = default(bool?), UnitPlacement? UnitPlacement = default(UnitPlacement?))
		{
			this.AddressElementFormat = AddressElementFormat;
			this.AddressCasing = AddressCasing;
			this.AddressLineFormatting = AddressLineFormatting;
			this.ApplyCasingToOrganization = ApplyCasingToOrganization;
			this.OrganizationPlacement = OrganizationPlacement;
			this.KeepExtraInformation = KeepExtraInformation;
			this.ListProcessorName = ListProcessorName;
			this.MailersAddress = MailersAddress;
			this.MailersCity = MailersCity;
			this.MailersListName = MailersListName;
			this.MailersName = MailersName;
			this.MailersState = MailersState;
			this.MailersZipcode = MailersZipcode;
			this.PmbPlacement = PmbPlacement;
			this.PreferAbbreviatedAddresses = PreferAbbreviatedAddresses;
			this.PreferredAddressType = PreferredAddressType;
			this.RequireCassReport = RequireCassReport;
			this.RequireDpvValidatedSecondary = RequireDpvValidatedSecondary;
			this.UnitPlacement = UnitPlacement;
		}
		



		/// <summary>
		/// Controls the casing behavior that is applied to address organization information. Defaults to true.
		/// </summary>
		/// <value>Controls the casing behavior that is applied to address organization information. Defaults to true.</value>
		[DataMember(Name="apply_casing_to_organization", EmitDefaultValue=false)]
		public bool? ApplyCasingToOrganization { get; set; }


		/// <summary>
		/// Controls retention of information determined to be not part of the address. Defaults to true.
		/// </summary>
		/// <value>Controls retention of information determined to be not part of the address. Defaults to true.</value>
		[DataMember(Name="keep_extra_information", EmitDefaultValue=false)]
		public bool? KeepExtraInformation { get; set; }

		/// <summary>
		/// The processing entity&#39;s name to display on the CASS™ 3553 report.
		/// </summary>
		/// <value>The processing entity&#39;s name to display on the CASS™ 3553 report.</value>
		[DataMember(Name="list_processor_name", EmitDefaultValue=false)]
		public string ListProcessorName { get; set; }

		/// <summary>
		/// The address to display on the CASS™ 3553 report.
		/// </summary>
		/// <value>The address to display on the CASS™ 3553 report.</value>
		[DataMember(Name="mailers_address", EmitDefaultValue=false)]
		public string MailersAddress { get; set; }

		/// <summary>
		/// The city to display on the CASS™ 3553 report.
		/// </summary>
		/// <value>The city to display on the CASS™ 3553 report.</value>
		[DataMember(Name="mailers_city", EmitDefaultValue=false)]
		public string MailersCity { get; set; }

		/// <summary>
		/// The list name to display on the CASS™ 3553 report.
		/// </summary>
		/// <value>The list name to display on the CASS™ 3553 report.</value>
		[DataMember(Name="mailers_list_name", EmitDefaultValue=false)]
		public string MailersListName { get; set; }

		/// <summary>
		/// The mailer&#39;s name to display on the CASS™ 3553 report.
		/// </summary>
		/// <value>The mailer&#39;s name to display on the CASS™ 3553 report.</value>
		[DataMember(Name="mailers_name", EmitDefaultValue=false)]
		public string MailersName { get; set; }

		/// <summary>
		/// The state to display on the CASS™ 3553 report.
		/// </summary>
		/// <value>The state to display on the CASS™ 3553 report.</value>
		[DataMember(Name="mailers_state", EmitDefaultValue=false)]
		public string MailersState { get; set; }

		/// <summary>
		/// The zipcode to display on the CASS™ 3553 report.
		/// </summary>
		/// <value>The zipcode to display on the CASS™ 3553 report.</value>
		[DataMember(Name="mailers_zipcode", EmitDefaultValue=false)]
		public string MailersZipcode { get; set; }


		/// <summary>
		/// When true, the abbreviated version of cities and street names if available. Note that not every city and street has an abbreviation. Defaults to false.
		/// </summary>
		/// <value>When true, the abbreviated version of cities and street names if available. Note that not every city and street has an abbreviation. Defaults to false.</value>
		[DataMember(Name="prefer_abbreviated_addresses", EmitDefaultValue=false)]
		public bool? PreferAbbreviatedAddresses { get; set; }


		/// <summary>
		/// Allows opting-out of CASS™ 3553 report generation. May improve processing speed. Defaults to false.
		/// </summary>
		/// <value>Allows opting-out of CASS™ 3553 report generation. May improve processing speed. Defaults to false.</value>
		[DataMember(Name="require_cass_report", EmitDefaultValue=false)]
		public bool? RequireCassReport { get; set; }

		/// <summary>
		/// Assign a +4 zip code only for those addresses with validated secondary information. When true. Defaults to false.
		/// </summary>
		/// <value>Assign a +4 zip code only for those addresses with validated secondary information. When true. Defaults to false.</value>
		[DataMember(Name="require_dpv_validated_secondary", EmitDefaultValue=false)]
		public bool? RequireDpvValidatedSecondary { get; set; }


		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class WalkSequenceConfiguration {\n");
			sb.Append("  AddressElementFormat: ").Append(AddressElementFormat).Append("\n");
			sb.Append("  AddressCasing: ").Append(AddressCasing).Append("\n");
			sb.Append("  AddressLineFormatting: ").Append(AddressLineFormatting).Append("\n");
			sb.Append("  ApplyCasingToOrganization: ").Append(ApplyCasingToOrganization).Append("\n");
			sb.Append("  OrganizationPlacement: ").Append(OrganizationPlacement).Append("\n");
			sb.Append("  KeepExtraInformation: ").Append(KeepExtraInformation).Append("\n");
			sb.Append("  ListProcessorName: ").Append(ListProcessorName).Append("\n");
			sb.Append("  MailersAddress: ").Append(MailersAddress).Append("\n");
			sb.Append("  MailersCity: ").Append(MailersCity).Append("\n");
			sb.Append("  MailersListName: ").Append(MailersListName).Append("\n");
			sb.Append("  MailersName: ").Append(MailersName).Append("\n");
			sb.Append("  MailersState: ").Append(MailersState).Append("\n");
			sb.Append("  MailersZipcode: ").Append(MailersZipcode).Append("\n");
			sb.Append("  PmbPlacement: ").Append(PmbPlacement).Append("\n");
			sb.Append("  PreferAbbreviatedAddresses: ").Append(PreferAbbreviatedAddresses).Append("\n");
			sb.Append("  PreferredAddressType: ").Append(PreferredAddressType).Append("\n");
			sb.Append("  RequireCassReport: ").Append(RequireCassReport).Append("\n");
			sb.Append("  RequireDpvValidatedSecondary: ").Append(RequireDpvValidatedSecondary).Append("\n");
			sb.Append("  UnitPlacement: ").Append(UnitPlacement).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as WalkSequenceConfiguration);
		}

		/// <summary>
		/// Returns true if WalkSequenceConfiguration instances are equal
		/// </summary>
		/// <param name="input">Instance of WalkSequenceConfiguration to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(WalkSequenceConfiguration input)
		{
			if (input == null)
				return false;

			return 
				(
					this.AddressElementFormat == input.AddressElementFormat ||
					(this.AddressElementFormat != null &&
					this.AddressElementFormat.Equals(input.AddressElementFormat))
				) && 
				(
					this.AddressCasing == input.AddressCasing ||
					(this.AddressCasing != null &&
					this.AddressCasing.Equals(input.AddressCasing))
				) && 
				(
					this.AddressLineFormatting == input.AddressLineFormatting ||
					(this.AddressLineFormatting != null &&
					this.AddressLineFormatting.Equals(input.AddressLineFormatting))
				) && 
				(
					this.ApplyCasingToOrganization == input.ApplyCasingToOrganization ||
					(this.ApplyCasingToOrganization != null &&
					this.ApplyCasingToOrganization.Equals(input.ApplyCasingToOrganization))
				) && 
				(
					this.OrganizationPlacement == input.OrganizationPlacement ||
					(this.OrganizationPlacement != null &&
					this.OrganizationPlacement.Equals(input.OrganizationPlacement))
				) && 
				(
					this.KeepExtraInformation == input.KeepExtraInformation ||
					(this.KeepExtraInformation != null &&
					this.KeepExtraInformation.Equals(input.KeepExtraInformation))
				) && 
				(
					this.ListProcessorName == input.ListProcessorName ||
					(this.ListProcessorName != null &&
					this.ListProcessorName.Equals(input.ListProcessorName))
				) && 
				(
					this.MailersAddress == input.MailersAddress ||
					(this.MailersAddress != null &&
					this.MailersAddress.Equals(input.MailersAddress))
				) && 
				(
					this.MailersCity == input.MailersCity ||
					(this.MailersCity != null &&
					this.MailersCity.Equals(input.MailersCity))
				) && 
				(
					this.MailersListName == input.MailersListName ||
					(this.MailersListName != null &&
					this.MailersListName.Equals(input.MailersListName))
				) && 
				(
					this.MailersName == input.MailersName ||
					(this.MailersName != null &&
					this.MailersName.Equals(input.MailersName))
				) && 
				(
					this.MailersState == input.MailersState ||
					(this.MailersState != null &&
					this.MailersState.Equals(input.MailersState))
				) && 
				(
					this.MailersZipcode == input.MailersZipcode ||
					(this.MailersZipcode != null &&
					this.MailersZipcode.Equals(input.MailersZipcode))
				) && 
				(
					this.PmbPlacement == input.PmbPlacement ||
					(this.PmbPlacement != null &&
					this.PmbPlacement.Equals(input.PmbPlacement))
				) && 
				(
					this.PreferAbbreviatedAddresses == input.PreferAbbreviatedAddresses ||
					(this.PreferAbbreviatedAddresses != null &&
					this.PreferAbbreviatedAddresses.Equals(input.PreferAbbreviatedAddresses))
				) && 
				(
					this.PreferredAddressType == input.PreferredAddressType ||
					(this.PreferredAddressType != null &&
					this.PreferredAddressType.Equals(input.PreferredAddressType))
				) && 
				(
					this.RequireCassReport == input.RequireCassReport ||
					(this.RequireCassReport != null &&
					this.RequireCassReport.Equals(input.RequireCassReport))
				) && 
				(
					this.RequireDpvValidatedSecondary == input.RequireDpvValidatedSecondary ||
					(this.RequireDpvValidatedSecondary != null &&
					this.RequireDpvValidatedSecondary.Equals(input.RequireDpvValidatedSecondary))
				) && 
				(
					this.UnitPlacement == input.UnitPlacement ||
					(this.UnitPlacement != null &&
					this.UnitPlacement.Equals(input.UnitPlacement))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.AddressElementFormat != null)
					hashCode = hashCode * 59 + this.AddressElementFormat.GetHashCode();
				if (this.AddressCasing != null)
					hashCode = hashCode * 59 + this.AddressCasing.GetHashCode();
				if (this.AddressLineFormatting != null)
					hashCode = hashCode * 59 + this.AddressLineFormatting.GetHashCode();
				if (this.ApplyCasingToOrganization != null)
					hashCode = hashCode * 59 + this.ApplyCasingToOrganization.GetHashCode();
				if (this.OrganizationPlacement != null)
					hashCode = hashCode * 59 + this.OrganizationPlacement.GetHashCode();
				if (this.KeepExtraInformation != null)
					hashCode = hashCode * 59 + this.KeepExtraInformation.GetHashCode();
				if (this.ListProcessorName != null)
					hashCode = hashCode * 59 + this.ListProcessorName.GetHashCode();
				if (this.MailersAddress != null)
					hashCode = hashCode * 59 + this.MailersAddress.GetHashCode();
				if (this.MailersCity != null)
					hashCode = hashCode * 59 + this.MailersCity.GetHashCode();
				if (this.MailersListName != null)
					hashCode = hashCode * 59 + this.MailersListName.GetHashCode();
				if (this.MailersName != null)
					hashCode = hashCode * 59 + this.MailersName.GetHashCode();
				if (this.MailersState != null)
					hashCode = hashCode * 59 + this.MailersState.GetHashCode();
				if (this.MailersZipcode != null)
					hashCode = hashCode * 59 + this.MailersZipcode.GetHashCode();
				if (this.PmbPlacement != null)
					hashCode = hashCode * 59 + this.PmbPlacement.GetHashCode();
				if (this.PreferAbbreviatedAddresses != null)
					hashCode = hashCode * 59 + this.PreferAbbreviatedAddresses.GetHashCode();
				if (this.PreferredAddressType != null)
					hashCode = hashCode * 59 + this.PreferredAddressType.GetHashCode();
				if (this.RequireCassReport != null)
					hashCode = hashCode * 59 + this.RequireCassReport.GetHashCode();
				if (this.RequireDpvValidatedSecondary != null)
					hashCode = hashCode * 59 + this.RequireDpvValidatedSecondary.GetHashCode();
				if (this.UnitPlacement != null)
					hashCode = hashCode * 59 + this.UnitPlacement.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
