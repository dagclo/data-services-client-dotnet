/* 
 * User Management
 *
 * Provides an API to:   * Enumerate the user base   * Create new users   * Gather specific user's information   * Change a user's information  User information include things like:   * Whether or not the user account is `enabled` or not   * Username/password credentials as well as API keys   * Contact information such as `first_name`, `last_name`, `organization` and `email_address`   * Group membership - membership of a `group` is used to grant access to services and features   * Tenant membership - membership of a `tenant` is used to assign users specific `roles` in a organization   * Additional details - each user may have a collection of custom key-value pairs  For details about authentication, refer to the [authentication specification](/oauth/swagger.json).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.Model.User
{
    /// <summary>
    /// TenantInformation
    /// </summary>
    [DataContract]
    public partial class TenantInformation :  IEquatable<TenantInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantInformation" /> class.
        /// </summary>
        /// <param name="TenantId">TenantId.</param>
        /// <param name="TenantName">TenantName.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="DomainGroups">A collection of group names..</param>
        /// <param name="DefaultGroups">A collection of group names..</param>
        /// <param name="ServiceConfigurations">A collection of service configuration names..</param>
        /// <param name="Roles">A collection of currently existing roles names..</param>
        public TenantInformation(string TenantId = default(string), string TenantName = default(string), string CreatedBy = default(string), string CreatedAt = default(string), List<string> DomainGroups = default(List<string>), List<string> DefaultGroups = default(List<string>), List<string> ServiceConfigurations = default(List<string>), List<string> Roles = default(List<string>))
        {
            this.TenantId = TenantId;
            this.TenantName = TenantName;
            this.CreatedBy = CreatedBy;
            this.CreatedAt = CreatedAt;
            this.DomainGroups = DomainGroups;
            this.DefaultGroups = DefaultGroups;
            this.ServiceConfigurations = ServiceConfigurations;
            this.Roles = Roles;
        }
        
        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenant_id", EmitDefaultValue=false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets TenantName
        /// </summary>
        [DataMember(Name="tenant_name", EmitDefaultValue=false)]
        public string TenantName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// A collection of group names.
        /// </summary>
        /// <value>A collection of group names.</value>
        [DataMember(Name="domain_groups", EmitDefaultValue=false)]
        public List<string> DomainGroups { get; set; }

        /// <summary>
        /// A collection of group names.
        /// </summary>
        /// <value>A collection of group names.</value>
        [DataMember(Name="default_groups", EmitDefaultValue=false)]
        public List<string> DefaultGroups { get; set; }

        /// <summary>
        /// A collection of service configuration names.
        /// </summary>
        /// <value>A collection of service configuration names.</value>
        [DataMember(Name="service_configurations", EmitDefaultValue=false)]
        public List<string> ServiceConfigurations { get; set; }

        /// <summary>
        /// A collection of currently existing roles names.
        /// </summary>
        /// <value>A collection of currently existing roles names.</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantInformation {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  TenantName: ").Append(TenantName).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DomainGroups: ").Append(DomainGroups).Append("\n");
            sb.Append("  DefaultGroups: ").Append(DefaultGroups).Append("\n");
            sb.Append("  ServiceConfigurations: ").Append(ServiceConfigurations).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantInformation);
        }

        /// <summary>
        /// Returns true if TenantInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.TenantName == input.TenantName ||
                    (this.TenantName != null &&
                    this.TenantName.Equals(input.TenantName))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DomainGroups == input.DomainGroups ||
                    this.DomainGroups != null &&
                    this.DomainGroups.SequenceEqual(input.DomainGroups)
                ) && 
                (
                    this.DefaultGroups == input.DefaultGroups ||
                    this.DefaultGroups != null &&
                    this.DefaultGroups.SequenceEqual(input.DefaultGroups)
                ) && 
                (
                    this.ServiceConfigurations == input.ServiceConfigurations ||
                    this.ServiceConfigurations != null &&
                    this.ServiceConfigurations.SequenceEqual(input.ServiceConfigurations)
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.TenantName != null)
                    hashCode = hashCode * 59 + this.TenantName.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DomainGroups != null)
                    hashCode = hashCode * 59 + this.DomainGroups.GetHashCode();
                if (this.DefaultGroups != null)
                    hashCode = hashCode * 59 + this.DefaultGroups.GetHashCode();
                if (this.ServiceConfigurations != null)
                    hashCode = hashCode * 59 + this.ServiceConfigurations.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
