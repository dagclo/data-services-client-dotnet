/* 
 * Pricebook Management
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.System.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.System.Model.Pricebook
{
	/// <summary>
	/// TimeFrame
	/// </summary>
	[DataContract]
	public partial class TimeFrame : IEquatable<TimeFrame>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="TimeFrame" /> class.
		/// </summary>
		/// <param name="StartTime">The beginning of the time frame. The time frame includes this start time..</param>
		/// <param name="EndTime">The end of  the time frame. The time frame includes this time..</param>
		public TimeFrame(DateTime? StartTime = default(DateTime?), DateTime? EndTime = default(DateTime?))
		{
			this.StartTime = StartTime;
			this.EndTime = EndTime;
		}

		/// <summary>
		/// The beginning of the time frame. The time frame includes this start time.
		/// </summary>
		/// <value>The beginning of the time frame. The time frame includes this start time.</value>
		[DataMember(Name = "start_time", EmitDefaultValue = false)]
		public DateTime? StartTime { get; set; }

		/// <summary>
		/// The end of  the time frame. The time frame includes this time.
		/// </summary>
		/// <value>The end of  the time frame. The time frame includes this time.</value>
		[DataMember(Name = "end_time", EmitDefaultValue = false)]
		public DateTime? EndTime { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class TimeFrame {\n");
			sb.Append("  StartTime: ").Append(StartTime).Append("\n");
			sb.Append("  EndTime: ").Append(EndTime).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as TimeFrame);
		}

		/// <summary>
		/// Returns true if TimeFrame instances are equal
		/// </summary>
		/// <param name="input">Instance of TimeFrame to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(TimeFrame input)
		{
			if (input == null)
				return false;

			return
				(
					this.StartTime == input.StartTime ||
					(this.StartTime != null &&
					this.StartTime.Equals(input.StartTime))
				) &&
				(
					this.EndTime == input.EndTime ||
					(this.EndTime != null &&
					this.EndTime.Equals(input.EndTime))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.StartTime != null)
					hashCode = hashCode * 59 + this.StartTime.GetHashCode();
				if (this.EndTime != null)
					hashCode = hashCode * 59 + this.EndTime.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
