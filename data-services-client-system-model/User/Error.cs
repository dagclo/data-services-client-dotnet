/* 
 * User Management
 *
 * Provides an API to:   * Enumerate the user base   * Create new users   * Gather specific user's information   * Change a user's information  User information include things like:   * Whether or not the user account is `enabled` or not   * Username/password credentials as well as API keys   * Contact information such as `first_name`, `last_name`, `organization` and `email_address`   * Group membership - membership of a `group` is used to grant access to services and features   * Tenant membership - membership of a `tenant` is used to assign users specific `roles` in a organization   * Additional details - each user may have a collection of custom key-value pairs  For details about authentication, refer to the [authentication specification](/oauth/swagger.json).
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.System.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.System.Model.User
{
	/// <summary>
	/// Describes an error object.
	/// </summary>
	[DataContract]
	public partial class Error : IEquatable<Error>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Error" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected Error() { }
		/// <summary>
		/// Initializes a new instance of the <see cref="Error" /> class.
		/// </summary>
		/// <param name="Code">The HTTP status code. (required).</param>
		/// <param name="Message">A humanly readable error message. (required).</param>
		/// <param name="AdditionalDetails">Additional details about the error..</param>
		public Error(int? Code = default(int?), string Message = default(string), Object AdditionalDetails = default(Object))
		{
			// to ensure "Code" is required (not null)
			if (Code == null)
			{
				throw new InvalidDataException("Code is a required property for Error and cannot be null");
			}
			else
			{
				this.Code = Code;
			}
			// to ensure "Message" is required (not null)
			if (Message == null)
			{
				throw new InvalidDataException("Message is a required property for Error and cannot be null");
			}
			else
			{
				this.Message = Message;
			}
			this.AdditionalDetails = AdditionalDetails;
		}

		/// <summary>
		/// The HTTP status code.
		/// </summary>
		/// <value>The HTTP status code.</value>
		[DataMember(Name = "code", EmitDefaultValue = false)]
		public int? Code { get; set; }

		/// <summary>
		/// A humanly readable error message.
		/// </summary>
		/// <value>A humanly readable error message.</value>
		[DataMember(Name = "message", EmitDefaultValue = false)]
		public string Message { get; set; }

		/// <summary>
		/// Additional details about the error.
		/// </summary>
		/// <value>Additional details about the error.</value>
		[DataMember(Name = "additional_details", EmitDefaultValue = false)]
		public Object AdditionalDetails { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Error {\n");
			sb.Append("  Code: ").Append(Code).Append("\n");
			sb.Append("  Message: ").Append(Message).Append("\n");
			sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as Error);
		}

		/// <summary>
		/// Returns true if Error instances are equal
		/// </summary>
		/// <param name="input">Instance of Error to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Error input)
		{
			if (input == null)
				return false;

			return
				(
					this.Code == input.Code ||
					(this.Code != null &&
					this.Code.Equals(input.Code))
				) &&
				(
					this.Message == input.Message ||
					(this.Message != null &&
					this.Message.Equals(input.Message))
				) &&
				(
					this.AdditionalDetails == input.AdditionalDetails ||
					(this.AdditionalDetails != null &&
					this.AdditionalDetails.Equals(input.AdditionalDetails))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.Code != null)
					hashCode = hashCode * 59 + this.Code.GetHashCode();
				if (this.Message != null)
					hashCode = hashCode * 59 + this.Message.GetHashCode();
				if (this.AdditionalDetails != null)
					hashCode = hashCode * 59 + this.AdditionalDetails.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
