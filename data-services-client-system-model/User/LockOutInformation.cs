/* 
 * User Management
 *
 * Provides an API to:   * Enumerate the user base   * Create new users   * Gather specific user's information   * Change a user's information  User information include things like:   * Whether or not the user account is `enabled` or not   * Username/password credentials as well as API keys   * Contact information such as `first_name`, `last_name`, `organization` and `email_address`   * Group membership - membership of a `group` is used to grant access to services and features   * Tenant membership - membership of a `tenant` is used to assign users specific `roles` in a organization   * Additional details - each user may have a collection of custom key-value pairs  For details about authentication, refer to the [authentication specification](/oauth/swagger.json).
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Quadient.DataServices.System.Model.Client.SwaggerDateConverter;

namespace Quadient.DataServices.System.Model.User
{
	/// <summary>
	/// LockOutInformation
	/// </summary>
	[DataContract]
	public partial class LockOutInformation : IEquatable<LockOutInformation>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="LockOutInformation" /> class.
		/// </summary>
		/// <param name="ServiceName">ServiceName.</param>
		/// <param name="Reason">reason why user is locked out.</param>
		/// <param name="Timestamp">when user was locked out.</param>
		public LockOutInformation(string ServiceName = default(string), string Reason = default(string), DateTime? Timestamp = default(DateTime?))
		{
			this.ServiceName = ServiceName;
			this.Reason = Reason;
			this.Timestamp = Timestamp;
		}

		/// <summary>
		/// Gets or Sets ServiceName
		/// </summary>
		[DataMember(Name = "service_name", EmitDefaultValue = false)]
		public string ServiceName { get; set; }

		/// <summary>
		/// reason why user is locked out
		/// </summary>
		/// <value>reason why user is locked out</value>
		[DataMember(Name = "reason", EmitDefaultValue = false)]
		public string Reason { get; set; }

		/// <summary>
		/// when user was locked out
		/// </summary>
		/// <value>when user was locked out</value>
		[DataMember(Name = "timestamp", EmitDefaultValue = false)]
		public DateTime? Timestamp { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class LockOutInformation {\n");
			sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
			sb.Append("  Reason: ").Append(Reason).Append("\n");
			sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as LockOutInformation);
		}

		/// <summary>
		/// Returns true if LockOutInformation instances are equal
		/// </summary>
		/// <param name="input">Instance of LockOutInformation to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(LockOutInformation input)
		{
			if (input == null)
				return false;

			return
				(
					this.ServiceName == input.ServiceName ||
					(this.ServiceName != null &&
					this.ServiceName.Equals(input.ServiceName))
				) &&
				(
					this.Reason == input.Reason ||
					(this.Reason != null &&
					this.Reason.Equals(input.Reason))
				) &&
				(
					this.Timestamp == input.Timestamp ||
					(this.Timestamp != null &&
					this.Timestamp.Equals(input.Timestamp))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.ServiceName != null)
					hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
				if (this.Reason != null)
					hashCode = hashCode * 59 + this.Reason.GetHashCode();
				if (this.Timestamp != null)
					hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
